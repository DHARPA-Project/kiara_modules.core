{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules for: core \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 TODO Package content \u00b6 Core modules \u00b6 array.map : Map a list of values into another list of values. array.metadata : Extract metadata from an 'array' value. array.sample : Sample an array. array.store : Save an Arrow array to a file. bytes.load : -- n/a -- bytes.msgpack.from_value : -- n/a -- bytes.msgpack.to_value : -- n/a -- bytes.store : -- n/a -- date.extract_from_string : Extract a date object from a string. date.range_check : Check whether a date falls within a specified date range. dev.dummy : Module that simulates processing, but uses hard-coded outputs as a result. dict.store : -- n/a -- file.import : Import an external file into a kiara session. file.load : Load a file and its metadata. file.metadata : -- n/a -- file.store : Save a file to disk. file_bundle.import : Import a file bundle into the kiara data store. file_bundle.load : Load a file bundle and its metadata. file_bundle.metadata : -- n/a -- file_bundle.store : Save a file bundle to disk. generic.restore_from_json : -- n/a -- generic.restore_scalar : Utility module, only used internally. generic.store : -- n/a -- json.to_json : Convert arbitrary types into json. list.contains : Check whether an element is in a list. list.store : -- n/a -- logic.and : Returns 'True' if both inputs are 'True'. logic.not : Negates the input. logic.or : Returns 'True' if one of the inputs is 'True'. string.deserialize : -- n/a -- string.magic : -- n/a -- string.match_regex : Match a string using a regular expression. string.replace : Replace a string if it matches a key in a mapping dictionary. string.serialize : -- n/a -- table.convert : Convert an Arrow table. table.cut_column : Cut off one column from a table, returning an array. table.export : Export a table object to disk. table.filter.with_mask : Filter a table using a mask array. table.load : Load a table object from disk. table.map_column : Map the items of one column of a table onto an array, using another module. table.merge : Create a table from other tables and/or arrays. table.metadata : Extract metadata from a table object. table.query.graphql : Execute a graphql aggregation query against an (Arrow) table. table.query.sql : Execute a sql query against an (Arrow) table. table.sample : Sample a table. table.store : -- n/a -- value.data_profile : Generate a data profile report for a dataset. yaml.to_yaml : Convert arbitrary types into YAML format. Pipelines \u00b6 array.restore : Load a column from a table object, returning an array. logic.nand : Returns 'False' if both inputs are 'True'. logic.nor : Returns 'True' if both inputs are 'False'. logic.xor : Returns 'True' if exactly one of it's two inputs is 'True'. table.filter.by_date : Filter a table by a date or date range. Value types \u00b6 bytes : An array of bytes. string : A string. boolean : A boolean. integer : An integer. float : A float. dict : A dict-like object. list : A list-like object. table : A table. array : An Apache arrow array. date : A date. file : A representation of a file. file_bundle : A representation of a set of files (folder, archive, etc.). renderables : A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter. Metadata schemas \u00b6 table : Describes properties for the 'table' data type. array : Describes properties fo the 'array' type. file : Describes properties for the 'file' value type. file_bundle : Describes properties for the 'file_bundle' value type. Links \u00b6 Documentation: https://dharpa.org/kiara_modules.core Code: https://github.com/DHARPA-Project/kiara_modules.core","title":"Home"},{"location":"#kiara-modules-for-core","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara modules for: core"},{"location":"#description","text":"TODO","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#core-modules","text":"array.map : Map a list of values into another list of values. array.metadata : Extract metadata from an 'array' value. array.sample : Sample an array. array.store : Save an Arrow array to a file. bytes.load : -- n/a -- bytes.msgpack.from_value : -- n/a -- bytes.msgpack.to_value : -- n/a -- bytes.store : -- n/a -- date.extract_from_string : Extract a date object from a string. date.range_check : Check whether a date falls within a specified date range. dev.dummy : Module that simulates processing, but uses hard-coded outputs as a result. dict.store : -- n/a -- file.import : Import an external file into a kiara session. file.load : Load a file and its metadata. file.metadata : -- n/a -- file.store : Save a file to disk. file_bundle.import : Import a file bundle into the kiara data store. file_bundle.load : Load a file bundle and its metadata. file_bundle.metadata : -- n/a -- file_bundle.store : Save a file bundle to disk. generic.restore_from_json : -- n/a -- generic.restore_scalar : Utility module, only used internally. generic.store : -- n/a -- json.to_json : Convert arbitrary types into json. list.contains : Check whether an element is in a list. list.store : -- n/a -- logic.and : Returns 'True' if both inputs are 'True'. logic.not : Negates the input. logic.or : Returns 'True' if one of the inputs is 'True'. string.deserialize : -- n/a -- string.magic : -- n/a -- string.match_regex : Match a string using a regular expression. string.replace : Replace a string if it matches a key in a mapping dictionary. string.serialize : -- n/a -- table.convert : Convert an Arrow table. table.cut_column : Cut off one column from a table, returning an array. table.export : Export a table object to disk. table.filter.with_mask : Filter a table using a mask array. table.load : Load a table object from disk. table.map_column : Map the items of one column of a table onto an array, using another module. table.merge : Create a table from other tables and/or arrays. table.metadata : Extract metadata from a table object. table.query.graphql : Execute a graphql aggregation query against an (Arrow) table. table.query.sql : Execute a sql query against an (Arrow) table. table.sample : Sample a table. table.store : -- n/a -- value.data_profile : Generate a data profile report for a dataset. yaml.to_yaml : Convert arbitrary types into YAML format.","title":"Core modules"},{"location":"#pipelines","text":"array.restore : Load a column from a table object, returning an array. logic.nand : Returns 'False' if both inputs are 'True'. logic.nor : Returns 'True' if both inputs are 'False'. logic.xor : Returns 'True' if exactly one of it's two inputs is 'True'. table.filter.by_date : Filter a table by a date or date range.","title":"Pipelines"},{"location":"#value-types","text":"bytes : An array of bytes. string : A string. boolean : A boolean. integer : An integer. float : A float. dict : A dict-like object. list : A list-like object. table : A table. array : An Apache arrow array. date : A date. file : A representation of a file. file_bundle : A representation of a set of files (folder, archive, etc.). renderables : A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter.","title":"Value types"},{"location":"#metadata-schemas","text":"table : Describes properties for the 'table' data type. array : Describes properties fo the 'array' type. file : Describes properties for the 'file' value type. file_bundle : Describes properties for the 'file_bundle' value type.","title":"Metadata schemas"},{"location":"#links","text":"Documentation: https://dharpa.org/kiara_modules.core Code: https://github.com/DHARPA-Project/kiara_modules.core","title":"Links"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. array.map \u00b6 Documentation Map a list of values into another list of values. This module must be configured with the type (and optional) configuration of another kiara module. This 'child' module will then be used to compute the array items of the result. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. module_type string The name of the yes kiara module to use to filter the input data. module_config object The config for no the kiara filter module. input_name string The name of the no input name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single input. output_name string The name of the no output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. Module config -- no config -- Python class class_name MapModule module_name kiara_modules.core.array full_name kiara_modules.core.array.MapModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_array: pa.Array = inputs.get_value_data(\u2026 init_data: typing.Dict[str, typing.Any] = {} for input_name in self.input_schemas.keys(): if input_name in [\"array\", self.module_inp\u2026 continue init_data[input_name] = inputs.get_value_o\u2026 result_list = map_with_module( input_array, module_input_name=self.module_input_name, module_obj=self.child_module, init_data=init_data, module_output_name=self.module_output_name, ) outputs.set_value(\"array\", pa.array(result_lis\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 array.metadata \u00b6 Documentation Extract metadata from an 'array' value. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name ArrayMetadataModule module_name kiara_modules.core.array full_name kiara_modules.core.array.ArrayMetada\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 array.sample \u00b6 Documentation Sample an array. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. sample_type string The sample yes method. Module config -- no config -- Python class class_name SampleArrayModule module_name kiara_modules.core.array full_name kiara_modules.core.array.SampleArray\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 sample_size: int = inputs.get_value_data(\"samp\u2026 sample_type: str = self.get_config_value(\"samp\u2026 if sample_size < 0: raise KiaraProcessingException( f\"Invalid sample size '{sample_size}':\u2026 ) input_name = self.get_value_type() if input_name == \"any\": input_name = \"value_item\" value: Value = inputs.get_value_obj(input_name) func = getattr(self, f\"sample_{sample_type}\") result = func(value=value, sample_size=sample_\u2026 outputs.set_value(\"sampled_value\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 array.store \u00b6 Documentation Save an Arrow array to a file. This module wraps the input array into an Arrow Table, and saves this table as a feather file. The output of this module is a dictionary representing the configuration to be used with kira to re-assemble the array object from disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreArrayTypeModule module_name kiara_modules.core.array full_name kiara_modules.core.array.StoreArrayT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 bytes.load \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadBytesModule module_name kiara_modules.core.bytes full_name kiara_modules.core.bytes.LoadBytesMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 path = inputs.get_value_data(\"path\") if not os.path.exists(path): raise KiaraProcessingException( f\"Can't read file, path does not exist\u2026 ) with open(path, \"rb\") as f: content = f.read() outputs.set_value(\"bytes\", content) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 bytes.msgpack.from_value \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, msgpack, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes serialize/deseria\u2026 Module config -- no config -- Python class class_name SerializeToMsgPackModule module_name kiara_modules.core.bytes.msgpack full_name kiara_modules.core.bytes.msgpack.Ser\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import msgpack type_name: str = self.get_config_value(\"value_\u2026 if not hasattr(self, f\"from_{type_name}\"): raise KiaraProcessingException( f\"Value type not supported for msgpack\u2026 ) func = getattr(self, f\"from_{type_name}\") value = inputs.get_value_obj(\"value_item\") metadata = value.get_metadata(also_return_sche\u2026 msg = func(value=value) data = {\"value_type\": value.type_name, \"metada\u2026 msg = msgpack.packb(data, use_bin_type=True) outputs.set_value(\"bytes\", msg) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 bytes.msgpack.to_value \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, msgpack, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes serialize/deseria\u2026 Module config -- no config -- Python class class_name DeserializeFromMsgPackModule module_name kiara_modules.core.bytes.msgpack full_name kiara_modules.core.bytes.msgpack.Des\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import msgpack msg = inputs.get_value_data(\"bytes\") unpacked = msgpack.unpackb(msg, raw=False) value_type = unpacked[\"value_type\"] outputs.set_value(\"value_type\", value_type) metadata = unpacked[\"metadata\"] outputs.set_value(\"value_metadata\", metadata) new_data = unpacked[\"data\"] if not hasattr(self, f\"to_{value_type}\"): raise KiaraProcessingException( f\"Value type not supported for msgpack\u2026 ) func = getattr(self, f\"to_{value_type}\") obj = func(data=new_data) outputs.set_value(\"value_data\", obj) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 bytes.store \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreBytesTypeModule module_name kiara_modules.core.bytes full_name kiara_modules.core.bytes.StoreBytesT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 date.extract_from_string \u00b6 Documentation Extract a date object from a string. This module is not really smart yet, currently it uses the following regex to extract a date (which might fail in a lot of cases): \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 r\"_(\\d{4}-\\d{2}-\\d{2})_\" \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name ExtractDateModule module_name kiara_modules.core.date full_name kiara_modules.core.date.ExtractDateM\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from dateutil import parser text = inputs.get_value_data(\"text\") date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})\u2026 assert date_match d_obj = parser.parse(date_match[0]) # type: i\u2026 outputs.set_value(\"date\", d_obj) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 date.range_check \u00b6 Documentation Check whether a date falls within a specified date range. If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'. Return True if that's the case, otherwise False. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name DateRangeCheckModule module_name kiara_modules.core.date full_name kiara_modules.core.date.DateRangeChe\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from dateutil import parser d = inputs.get_value_data(\"date\") earliest: typing.Optional[datetime.datetime] =\u2026 latest: typing.Optional[datetime.datetime] = i\u2026 if not earliest and not latest: outputs.set_value(\"within_range\", True) return if hasattr(d, \"as_py\"): d = d.as_py() if isinstance(d, str): d = parser.parse(d) if earliest and latest: matches = earliest <= d <= latest elif earliest: matches = earliest <= d else: matches = d <= latest outputs.set_value(\"within_range\", matches) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 dev.dummy \u00b6 Documentation Module that simulates processing, but uses hard-coded outputs as a result. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. documentation string no input_schema object The input yes schema for this module. output_schema object The output yes schema for this module. outputs object The (dummy) no output for this module. delay number The delay in no seconds from processing start to when the (dummy) outputs are returned. Module config -- no config -- Python class class_name DummyModule module_name kiara_modules.core.dev full_name kiara_modules.core.dev.DummyModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 \"\"\"Returns the hardcoded output values that ar\u2026 Optionally, this module can simulate processin\u2026 \"\"\" time.sleep(self.config.get(\"delay\")) # type: \u2026 output_values: typing.Mapping = self.config.ge\u2026 value_dict = {} for output_name in self.output_names: if output_name not in output_values.keys(): raise NotImplementedError() # v = self.output_schemas[output_name]\u2026 # value_dict[output_name] = v else: value_dict[output_name] = output_value\u2026 outputs.set_values(**value_dict) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 dict.store \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. options integer The options to no use for the json serialization. Check https://github.c\u2026 for details. file_name string The name of the no serialized file. Module config -- no config -- Python class class_name SaveDictModule module_name kiara_modules.core.dict full_name kiara_modules.core.dict.SaveDictModu\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file.import \u00b6 Documentation Import an external file into a kiara session. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. source_profile string The name of yes the source profile. Used to distinguish different input categories for the same input type. source_type string The type of yes the source to import from. Module config -- no config -- Python class class_name DefaultFileImportModule module_name kiara_modules.core.file full_name kiara_modules.core.file.DefaultFileI\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_type: str = self.get_config_value(\"sour\u2026 source = inputs.get_value_data(source_profile) if self.get_target_value_type() == \"any\": output_key: str = \"value_item\" else: output_key = self.get_target_value_type() func_name = f\"import_from__{source_profile}__{\u2026 if not hasattr(self, func_name): raise Exception( f\"Can't import '{source_type}' value: \u2026 ) func = getattr(self, func_name) # TODO: check signature? result = func(source) # schema = ValueSchema(type=self.get_target_va\u2026 # value_lineage = ValueLineage.from_module_and\u2026 # module=self, output_name=output_key, inp\u2026 # ) # value: Value = self._kiara.data_registry.reg\u2026 # value_data=result, value_schema=schema, \u2026 # ) outputs.set_value(output_key, result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file.load \u00b6 Documentation Load a file and its metadata. This module does not read or load the content of a file, but contains the path to the local representation/version of the file so it can be read by a subsequent process. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadLocalFileModule module_name kiara_modules.core.file full_name kiara_modules.core.file.LoadLocalFil\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") path = os.path.join(base_path, rel_path) file_model = KiaraFile.load_file(path) outputs.set_value(\"file\", file_model) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file.metadata \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name FileMetadataModule module_name kiara_modules.core.file full_name kiara_modules.core.file.FileMetadata\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file.store \u00b6 Documentation Save a file to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreFileTypeModule module_name kiara_modules.core.file full_name kiara_modules.core.file.StoreFileTyp\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file_bundle.import \u00b6 Documentation Import a file bundle into the kiara data store. This module will support multiple source types and profiles in the future, but at the moment only import from local folder is supported. Thus, requiring the config value 'local' for 'source_profile', and 'folder_path' for 'source_type'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. source_profile string The name of yes the source profile. Used to distinguish different input categories for the same input type. source_type string The type of yes the source to import from. Module config -- no config -- Python class class_name DefaultFileBundleImportModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.Defau\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_type: str = self.get_config_value(\"sour\u2026 source = inputs.get_value_data(source_profile) if self.get_target_value_type() == \"any\": output_key: str = \"value_item\" else: output_key = self.get_target_value_type() func_name = f\"import_from__{source_profile}__{\u2026 if not hasattr(self, func_name): raise Exception( f\"Can't import '{source_type}' value: \u2026 ) func = getattr(self, func_name) # TODO: check signature? result = func(source) # schema = ValueSchema(type=self.get_target_va\u2026 # value_lineage = ValueLineage.from_module_and\u2026 # module=self, output_name=output_key, inp\u2026 # ) # value: Value = self._kiara.data_registry.reg\u2026 # value_data=result, value_schema=schema, \u2026 # ) outputs.set_value(output_key, result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file_bundle.load \u00b6 Documentation Load a file bundle and its metadata. This module does not read or load the content of all included files, but contains the path to the local representation/version of them so they can be read by a subsequent process. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadFileBundleModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.LoadF\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") path = os.path.join(base_path, rel_path) included_files = inputs.get_value_data(\"includ\u2026 excluded_dirs = inputs.get_value_data(\"exclude\u2026 excluded_files = inputs.get_value_data(\"exclud\u2026 import_config = FolderImportConfig( include_files=included_files, exclude_dirs=excluded_dirs, excluded_files=excluded_files, ) bundle = KiaraFileBundle.import_folder(source=\u2026 outputs.set_values(file_bundle=bundle) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file_bundle.metadata \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name FileBundleMetadataModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.FileB\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file_bundle.store \u00b6 Documentation Save a file bundle to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreFileBundleType module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.Store\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 generic.restore_from_json \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name RestoreFromJsonDictModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.RestoreFr\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") file_name = inputs.get_value_data(\"file_name\") full_path = os.path.join(base_path, file_name) if not os.path.exists(full_path): raise KiaraProcessingException( f\"Can't deserialize dict, path to file\u2026 ) if not os.path.isfile(os.path.realpath(full_pa\u2026 raise KiaraProcessingException( f\"Can't deserialize dict, path is not \u2026 ) with open(full_path, \"r\") as f: content = f.read() data = orjson.loads(content) outputs.set_value(\"value_item\", data) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 generic.restore_scalar \u00b6 Documentation Utility module, only used internally. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type of yes the scalar to load. Module config -- no config -- Python class class_name RestoreScalarModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.RestoreSc\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 data = inputs.get_value_obj(\"scalar_data\") outputs.set_value(\"value_item\", data) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 generic.store \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreScalarModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.StoreScal\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 json.to_json \u00b6 Documentation Convert arbitrary types into json. Very early days for this module, it doesn't support a lot of types yet. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. source_type string The source type. yes target_type string The target type. yes Module config -- no config -- Python class class_name ToJsonModuleOld module_name kiara_modules.core.json full_name kiara_modules.core.json.ToJsonModule\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"source_value\") if value.value_schema.type != self.source_type: raise KiaraProcessingException( f\"Can't convert value of source type '\u2026 ) config = inputs.get_value_data(\"config\") if config is None: config = {} target_value = self.convert(value=value, confi\u2026 # TODO: validate value? outputs.set_value(\"target_value\", target_value) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 list.contains \u00b6 Documentation Check whether an element is in a list. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name IncludedInListCheckModule module_name kiara_modules.core.list full_name kiara_modules.core.list.IncludedInLi\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 item_list = inputs.get_value_data(\"list\") item = inputs.get_value_data(\"item\") outputs.set_value(\"is_included\", item in item_\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 list.store \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. options integer The options to no use for the json serialization. Check https://github.c\u2026 for details. file_name string The name of the no serialized file. Module config -- no config -- Python class class_name StoreDictModule module_name kiara_modules.core.list full_name kiara_modules.core.list.StoreDictMod\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.and \u00b6 Documentation Returns 'True' if both inputs are 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name AndModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.AndModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 time.sleep(self.config.delay) # type: ignore outputs.set_value( \"y\", inputs.get_value_data(\"a\") and inputs\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.not \u00b6 Documentation Negates the input. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name NotModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.NotModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 \"\"\"Negates the input boolean.\"\"\" time.sleep(self.config.get(\"delay\")) # type: \u2026 outputs.set_value(\"y\", not inputs.get_value_da\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.or \u00b6 Documentation Returns 'True' if one of the inputs is 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name OrModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.OrModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 time.sleep(self.config.get(\"delay\")) # type: \u2026 outputs.set_value(\"y\", inputs.get_value_data(\"\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 string.deserialize \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. serialization\u2026 string The yes serialization type that was used to serialize the value. Module config -- no config -- Python class class_name DeserializeStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.Deserializ\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 serialization_type = self.get_config_value(\"se\u2026 if serialization_type not in [\"json\"]: raise KiaraProcessingException( f\"Can't deserialize string: serialisat\u2026 ) serialized = inputs.get_value_data(\"serialized\u2026 outputs.set_value(\"value_item\", serialized) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 string.magic \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name MagicModule module_name kiara_modules.core.string full_name kiara_modules.core.string.MagicModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 pass \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 string.match_regex \u00b6 Documentation Match a string using a regular expression. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. regex string The regex to yes apply. only_first_ma\u2026 boolean Whether to no only return the first match, or all matches. Module config -- no config -- Python class class_name RegexModule module_name kiara_modules.core.string full_name kiara_modules.core.string.RegexModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 text = inputs.get_value_data(\"text\") regex = self.get_config_value(\"regex\") matches = re.findall(regex, text) if not matches: raise KiaraProcessingException(f\"No match \u2026 if self.get_config_value(\"only_first_match\"): result = matches[0] else: result = matches outputs.set_value(\"text\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 string.replace \u00b6 Documentation Replace a string if it matches a key in a mapping dictionary. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. replacement_m\u2026 object A map, yes containing the strings to be replaced as keys, and the replacements as values. default_value string The default no value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself. Module config -- no config -- Python class class_name ReplaceStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.ReplaceStr\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 text = inputs.get_value_data(\"text\") repl_map = self.get_config_value(\"replacement_\u2026 default = self.get_config_value(\"default_value\u2026 if text not in repl_map.keys(): if default is None: result = text else: result = default else: result = repl_map[text] outputs.set_value(\"text\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 string.serialize \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. value_type string The type of yes the source value. serialization\u2026 string The type of yes the converted value. Module config -- no config -- Python class class_name SerializeStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.SerializeS\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_type: str = self.get_config_value(\"value\u2026 value_obj = inputs.get_value_obj(\"value_item\") serialization_type = self.get_config_value(\"se\u2026 if value_type != value_obj.type_name: raise KiaraProcessingException( f\"Invalid type ({value_obj.type_name})\u2026 ) if not hasattr(self, f\"to_{serialization_type}\u2026 # this can never happen, I think raise Exception( f\"Module '{self._module_type_id}' can'\u2026 ) func = getattr(self, f\"to_{serialization_type}\u2026 serialized = func(value_obj) if isinstance(serialized, typing.Mapping): serialized = DeserializeConfig(**serialize\u2026 if not isinstance(serialized, DeserializeConfi\u2026 raise KiaraProcessingException( f\"Invalid serialization result type: {\u2026 ) outputs.set_values( deserialize_config=serialized, value_info=\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.convert \u00b6 Documentation Convert an Arrow table. This module supportes two conversion targets currently: \u2022 bytes: a memoryview of the byte-representation of the Table \u2022 string: the base64-encoded byte-representation of the Table Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. source_profile string The profile yes of the source value. target_type string The type of yes the value to convert to. allow_none_in\u2026 boolean Whether to no allow 'none' source values, if one is encountered 'none' is returned. ignore_errors boolean Whether to no ignore convert errors and omit the failed items. Module config -- no config -- Python class class_name ConvertToTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.ConvertToTa\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_config: typing.Mapping[ str, typing.Mapping[str, typing.Any] ] = self._kiara.type_mgmt.get_type_config_for_\u2026 source_type = source_config[\"type\"] target_type: str = self.get_config_value(\"targ\u2026 allow_none: bool = self.get_config_value(\"allo\u2026 source: Value = inputs.get_value_obj(source_pr\u2026 if source_type != source.type_name: raise KiaraProcessingException( f\"Invalid type ({source.type_name}) of\u2026 ) if not source.is_set or source.is_none: if allow_none: outputs.set_value(\"value_item\", None) return else: raise KiaraProcessingException(\"No sou\u2026 if not hasattr(self, f\"from_{source_profile}\"): raise Exception( f\"Module '{self._module_type_id}' can'\u2026 ) func = getattr(self, f\"from_{source_profile}\") converted = func(source) outputs.set_value(target_type, converted) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.cut_column \u00b6 Documentation Cut off one column from a table, returning an array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CutColumnModule module_name kiara_modules.core.table full_name kiara_modules.core.table.CutColumnMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa table_value = inputs.get_value_obj(\"table\") column_name: str = inputs.get_value_data(\"colu\u2026 available = table_value.get_metadata(\"table\")[\u2026 if column_name not in available: raise KiaraProcessingException( f\"Invalid column name '{column_name}'.\u2026 ) table: pa.Table = inputs.get_value_data(\"table\u2026 column = table.column(column_name) outputs.set_value(\"array\", column) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.export \u00b6 Documentation Export a table object to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name ExportArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.ExportArrow\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa from pyarrow import feather table: pa.Table = inputs.get_value_data(\"table\u2026 full_path: str = inputs.get_value_data(\"path\") force_overwrite = inputs.get_value_data(\"force\u2026 format: str = inputs.get_value_data(\"format\") compression = inputs.get_value_data(\"compressi\u2026 if compression not in [\"zstd\", \"lz4\", \"uncompr\u2026 raise KiaraProcessingException( f\"Invalid compression format '{compres\u2026 ) if format != \"feather\": raise KiaraProcessingException( f\"Can't export table to format '{forma\u2026 ) if os.path.exists(full_path) and not force_ove\u2026 raise KiaraProcessingException( f\"Can't write table to file, file alre\u2026 ) os.makedirs(os.path.dirname(full_path), exist_\u2026 feather.write_feather(table, full_path, compre\u2026 result = { \"module_type\": \"table.load\", \"base_path_input_name\": \"base_path\", \"inputs\": { \"base_path\": os.path.dirname(full_path\u2026 \"rel_path\": os.path.basename(full_path\u2026 \"format\": format, }, \"value_id\": NO_VALUE_ID_MARKER, \"output_name\": \"table\", } outputs.set_value(\"load_config\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.filter.with_mask \u00b6 Documentation Filter a table using a mask array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CreateFilteredTableModule module_name kiara_modules.core.table.filter full_name kiara_modules.core.table.filter.Crea\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_table: pa.Table = inputs.get_value_data(\u2026 filter_array: pa.Array = inputs.get_value_data\u2026 filtered = input_table.filter(filter_array) outputs.set_value(\"table\", filtered) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.load \u00b6 Documentation Load a table object from disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.LoadArrowTa\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from pyarrow import feather base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") format = inputs.get_value_data(\"format\") if format != \"feather\": raise NotImplementedError() path = os.path.join(base_path, rel_path) table = feather.read_table(path) outputs.set_value(\"table\", table) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.map_column \u00b6 Documentation Map the items of one column of a table onto an array, using another module. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. module_type string The name of the yes kiara module to use to filter the input data. module_config object The config for no the kiara filter module. input_name string The name of the no input name of the module which will receive the rows from our input table. Can be omitted if the configured module only has a single input. output_name string The name of the no output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. Module config -- no config -- Python class class_name MapColumnModule module_name kiara_modules.core.table full_name kiara_modules.core.table.MapColumnMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa table: pa.Table = inputs.get_value_data(\"table\u2026 column_name = inputs.get_value_data(\"column_na\u2026 if column_name not in table.column_names: raise KiaraProcessingException( f\"Table column '{column_name}' not ava\u2026 ) input_array: pa.Array = table.column(column_na\u2026 init_data: typing.Dict[str, typing.Any] = {} for input_name in self.input_schemas.keys(): if input_name in [\"table\", \"column_name\", \u2026 continue init_data[input_name] = inputs.get_value_o\u2026 result_list = map_with_module( input_array, module_input_name=self.module_input_name, module_obj=self.child_module, init_data=init_data, module_output_name=self.module_output_name, ) outputs.set_value(\"array\", pa.array(result_lis\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.merge \u00b6 Documentation Create a table from other tables and/or arrays. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. input_schema object A dict yes describing the inputs for this merge process. Module config -- no config -- Python class class_name MergeTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.MergeTableM\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_schema: typing.Dict[str, typing.Any] = s\u2026 \"input_schema\" ) sources = {} for field_name in input_schema.keys(): sources[field_name] = inputs.get_value_dat\u2026 len_dict = {} arrays = [] column_names = [] for source_key, table_or_column in sources.ite\u2026 if isinstance(table_or_column, pa.Table): rows = table_or_column.num_rows for name in table_or_column.schema.nam\u2026 column = table_or_column.column(na\u2026 arrays.append(column) column_names.append(name) elif isinstance(table_or_column, (pa.Array\u2026 rows = len(table_or_column) arrays.append(table_or_column) column_names.append(source_key) else: raise KiaraProcessingException( f\"Can't merge table: invalid type \u2026 ) len_dict[source_key] = rows all_rows = None for source_key, rows in len_dict.items(): if all_rows is None: all_rows = rows else: if all_rows != rows: all_rows = None break if all_rows is None: len_str = \"\" for name, rows in len_dict.items(): len_str = f\" {name} ({rows})\" raise KiaraProcessingException( f\"Can't merge table, sources have diff\u2026 ) table = pa.Table.from_arrays(arrays=arrays, na\u2026 outputs.set_value(\"table\", table) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.metadata \u00b6 Documentation Extract metadata from a table object. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name TableMetadataModule module_name kiara_modules.core.table full_name kiara_modules.core.table.TableMetada\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.query.graphql \u00b6 Documentation Execute a graphql aggregation query against an (Arrow) table. References: - https://vaex.io/docs/example_graphql.html Examples: An example for a query could be: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 { \u2502 \u2502 df(where: { \u2502 \u2502 Language: {_eq: \"German\"} \u2502 \u2502 } ) { \u2502 \u2502 \u2502 \u2502 row(limit: 10) { \u2502 \u2502 Label \u2502 \u2502 City \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name QueryTableGraphQL module_name kiara_modules.core.table.query full_name kiara_modules.core.table.query.Query\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import vaex table = inputs.get_value_data(\"table\") query = inputs.get_value_data(\"query\") df = vaex.from_arrow_table(table) result = df.graphql.execute(query) outputs.set_value(\"query_result\", result.to_di\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.query.sql \u00b6 Documentation Execute a sql query against an (Arrow) table. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. query string The query to no execute. If not specified, the user will be able to provide their own. relation_name string The name the no table is referred to in the sql query. If not specified, the user will be able to provide their own. Module config -- no config -- Python class class_name QueryTableSQL module_name kiara_modules.core.table.query full_name kiara_modules.core.table.query.Query\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import duckdb if self.get_config_value(\"query\") is None: _query: str = inputs.get_value_data(\"query\u2026 _relation_name: str = inputs.get_value_dat\u2026 else: _query = self.get_config_value(\"query\") _relation_name = self.get_config_value(\"re\u2026 if _relation_name.upper() in RESERVED_SQL_KEYW\u2026 raise KiaraProcessingException( f\"Invalid relation name '{_relation_na\u2026 ) _table = inputs.get_value_data(\"table\") relation: duckdb.DuckDBPyRelation = duckdb.arr\u2026 result: duckdb.DuckDBPyResult = relation.query\u2026 print(result.arrow()) outputs.set_value(\"query_result\", result.arrow\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.sample \u00b6 Documentation Sample a table. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. sample_type string The sample yes method. Module config -- no config -- Python class class_name SampleTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.SampleTable\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 sample_size: int = inputs.get_value_data(\"samp\u2026 sample_type: str = self.get_config_value(\"samp\u2026 if sample_size < 0: raise KiaraProcessingException( f\"Invalid sample size '{sample_size}':\u2026 ) input_name = self.get_value_type() if input_name == \"any\": input_name = \"value_item\" value: Value = inputs.get_value_obj(input_name) func = getattr(self, f\"sample_{sample_type}\") result = func(value=value, sample_size=sample_\u2026 outputs.set_value(\"sampled_value\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.store \u00b6 Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. compression string The compression no to use when saving the table. Module config -- no config -- Python class class_name StoreArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.StoreArrowT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 value.data_profile \u00b6 Documentation Generate a data profile report for a dataset. This uses the DataProfiler Python library, check out its documentation for more details. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes profile. Module config -- no config -- Python class class_name DataProfilerModule module_name kiara_modules.core.value full_name kiara_modules.core.value.DataProfile\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa from dataprofiler import Data, Profiler, Profi\u2026 set_verbosity(logging.WARNING) value_type = self.get_config_value(\"value_type\u2026 profile_options = ProfilerOptions() profile_options.structured_options.data_labele\u2026 profile_options.unstructured_options.data_labe\u2026 if value_type == \"table\": table_item: pa.Table = inputs.get_value_da\u2026 pd = table_item.to_pandas() profile = Profiler( pd, options=profile_options ) # Calculate Statistics, Entity Recognit\u2026 report = profile.report() elif value_type == \"file\": file_item: KiaraFile = inputs.get_value_da\u2026 data = Data(file_item.path) profile = Profiler(data, options=profile_o\u2026 report = profile.report() else: raise KiaraProcessingException( f\"Data profiling of value type '{value\u2026 ) outputs.set_value(\"report\", report) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 yaml.to_yaml \u00b6 Documentation Convert arbitrary types into YAML format. Early days for this module, it doesn't support a whole lot of types yet. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. source_type string The source type. yes target_type string The target type. yes Module config -- no config -- Python class class_name ToYamlModuleOld module_name kiara_modules.core.yaml full_name kiara_modules.core.yaml.ToYamlModule\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"source_value\") if value.value_schema.type != self.source_type: raise KiaraProcessingException( f\"Can't convert value of source type '\u2026 ) config = inputs.get_value_data(\"config\") if config is None: config = {} target_value = self.convert(value=value, confi\u2026 # TODO: validate value? outputs.set_value(\"target_value\", target_value) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list/#arraymap","text":"Documentation Map a list of values into another list of values. This module must be configured with the type (and optional) configuration of another kiara module. This 'child' module will then be used to compute the array items of the result. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. module_type string The name of the yes kiara module to use to filter the input data. module_config object The config for no the kiara filter module. input_name string The name of the no input name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single input. output_name string The name of the no output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. Module config -- no config -- Python class class_name MapModule module_name kiara_modules.core.array full_name kiara_modules.core.array.MapModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_array: pa.Array = inputs.get_value_data(\u2026 init_data: typing.Dict[str, typing.Any] = {} for input_name in self.input_schemas.keys(): if input_name in [\"array\", self.module_inp\u2026 continue init_data[input_name] = inputs.get_value_o\u2026 result_list = map_with_module( input_array, module_input_name=self.module_input_name, module_obj=self.child_module, init_data=init_data, module_output_name=self.module_output_name, ) outputs.set_value(\"array\", pa.array(result_lis\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"array.map"},{"location":"modules_list/#arraymetadata","text":"Documentation Extract metadata from an 'array' value. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name ArrayMetadataModule module_name kiara_modules.core.array full_name kiara_modules.core.array.ArrayMetada\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"array.metadata"},{"location":"modules_list/#arraysample","text":"Documentation Sample an array. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. sample_type string The sample yes method. Module config -- no config -- Python class class_name SampleArrayModule module_name kiara_modules.core.array full_name kiara_modules.core.array.SampleArray\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 sample_size: int = inputs.get_value_data(\"samp\u2026 sample_type: str = self.get_config_value(\"samp\u2026 if sample_size < 0: raise KiaraProcessingException( f\"Invalid sample size '{sample_size}':\u2026 ) input_name = self.get_value_type() if input_name == \"any\": input_name = \"value_item\" value: Value = inputs.get_value_obj(input_name) func = getattr(self, f\"sample_{sample_type}\") result = func(value=value, sample_size=sample_\u2026 outputs.set_value(\"sampled_value\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"array.sample"},{"location":"modules_list/#arraystore","text":"Documentation Save an Arrow array to a file. This module wraps the input array into an Arrow Table, and saves this table as a feather file. The output of this module is a dictionary representing the configuration to be used with kira to re-assemble the array object from disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core, array Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreArrayTypeModule module_name kiara_modules.core.array full_name kiara_modules.core.array.StoreArrayT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"array.store"},{"location":"modules_list/#bytesload","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadBytesModule module_name kiara_modules.core.bytes full_name kiara_modules.core.bytes.LoadBytesMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 path = inputs.get_value_data(\"path\") if not os.path.exists(path): raise KiaraProcessingException( f\"Can't read file, path does not exist\u2026 ) with open(path, \"rb\") as f: content = f.read() outputs.set_value(\"bytes\", content) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"bytes.load"},{"location":"modules_list/#bytesmsgpackfrom_value","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, msgpack, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes serialize/deseria\u2026 Module config -- no config -- Python class class_name SerializeToMsgPackModule module_name kiara_modules.core.bytes.msgpack full_name kiara_modules.core.bytes.msgpack.Ser\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import msgpack type_name: str = self.get_config_value(\"value_\u2026 if not hasattr(self, f\"from_{type_name}\"): raise KiaraProcessingException( f\"Value type not supported for msgpack\u2026 ) func = getattr(self, f\"from_{type_name}\") value = inputs.get_value_obj(\"value_item\") metadata = value.get_metadata(also_return_sche\u2026 msg = func(value=value) data = {\"value_type\": value.type_name, \"metada\u2026 msg = msgpack.packb(data, use_bin_type=True) outputs.set_value(\"bytes\", msg) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"bytes.msgpack.from_value"},{"location":"modules_list/#bytesmsgpackto_value","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, msgpack, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes serialize/deseria\u2026 Module config -- no config -- Python class class_name DeserializeFromMsgPackModule module_name kiara_modules.core.bytes.msgpack full_name kiara_modules.core.bytes.msgpack.Des\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import msgpack msg = inputs.get_value_data(\"bytes\") unpacked = msgpack.unpackb(msg, raw=False) value_type = unpacked[\"value_type\"] outputs.set_value(\"value_type\", value_type) metadata = unpacked[\"metadata\"] outputs.set_value(\"value_metadata\", metadata) new_data = unpacked[\"data\"] if not hasattr(self, f\"to_{value_type}\"): raise KiaraProcessingException( f\"Value type not supported for msgpack\u2026 ) func = getattr(self, f\"to_{value_type}\") obj = func(data=new_data) outputs.set_value(\"value_data\", obj) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"bytes.msgpack.to_value"},{"location":"modules_list/#bytesstore","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags bytes, core, serialization Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreBytesTypeModule module_name kiara_modules.core.bytes full_name kiara_modules.core.bytes.StoreBytesT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"bytes.store"},{"location":"modules_list/#dateextract_from_string","text":"Documentation Extract a date object from a string. This module is not really smart yet, currently it uses the following regex to extract a date (which might fail in a lot of cases): \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 r\"_(\\d{4}-\\d{2}-\\d{2})_\" \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name ExtractDateModule module_name kiara_modules.core.date full_name kiara_modules.core.date.ExtractDateM\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from dateutil import parser text = inputs.get_value_data(\"text\") date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})\u2026 assert date_match d_obj = parser.parse(date_match[0]) # type: i\u2026 outputs.set_value(\"date\", d_obj) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"date.extract_from_string"},{"location":"modules_list/#daterange_check","text":"Documentation Check whether a date falls within a specified date range. If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'. Return True if that's the case, otherwise False. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name DateRangeCheckModule module_name kiara_modules.core.date full_name kiara_modules.core.date.DateRangeChe\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from dateutil import parser d = inputs.get_value_data(\"date\") earliest: typing.Optional[datetime.datetime] =\u2026 latest: typing.Optional[datetime.datetime] = i\u2026 if not earliest and not latest: outputs.set_value(\"within_range\", True) return if hasattr(d, \"as_py\"): d = d.as_py() if isinstance(d, str): d = parser.parse(d) if earliest and latest: matches = earliest <= d <= latest elif earliest: matches = earliest <= d else: matches = d <= latest outputs.set_value(\"within_range\", matches) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"date.range_check"},{"location":"modules_list/#devdummy","text":"Documentation Module that simulates processing, but uses hard-coded outputs as a result. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. documentation string no input_schema object The input yes schema for this module. output_schema object The output yes schema for this module. outputs object The (dummy) no output for this module. delay number The delay in no seconds from processing start to when the (dummy) outputs are returned. Module config -- no config -- Python class class_name DummyModule module_name kiara_modules.core.dev full_name kiara_modules.core.dev.DummyModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 \"\"\"Returns the hardcoded output values that ar\u2026 Optionally, this module can simulate processin\u2026 \"\"\" time.sleep(self.config.get(\"delay\")) # type: \u2026 output_values: typing.Mapping = self.config.ge\u2026 value_dict = {} for output_name in self.output_names: if output_name not in output_values.keys(): raise NotImplementedError() # v = self.output_schemas[output_name]\u2026 # value_dict[output_name] = v else: value_dict[output_name] = output_value\u2026 outputs.set_values(**value_dict) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"dev.dummy"},{"location":"modules_list/#dictstore","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. options integer The options to no use for the json serialization. Check https://github.c\u2026 for details. file_name string The name of the no serialized file. Module config -- no config -- Python class class_name SaveDictModule module_name kiara_modules.core.dict full_name kiara_modules.core.dict.SaveDictModu\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"dict.store"},{"location":"modules_list/#fileimport","text":"Documentation Import an external file into a kiara session. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. source_profile string The name of yes the source profile. Used to distinguish different input categories for the same input type. source_type string The type of yes the source to import from. Module config -- no config -- Python class class_name DefaultFileImportModule module_name kiara_modules.core.file full_name kiara_modules.core.file.DefaultFileI\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_type: str = self.get_config_value(\"sour\u2026 source = inputs.get_value_data(source_profile) if self.get_target_value_type() == \"any\": output_key: str = \"value_item\" else: output_key = self.get_target_value_type() func_name = f\"import_from__{source_profile}__{\u2026 if not hasattr(self, func_name): raise Exception( f\"Can't import '{source_type}' value: \u2026 ) func = getattr(self, func_name) # TODO: check signature? result = func(source) # schema = ValueSchema(type=self.get_target_va\u2026 # value_lineage = ValueLineage.from_module_and\u2026 # module=self, output_name=output_key, inp\u2026 # ) # value: Value = self._kiara.data_registry.reg\u2026 # value_data=result, value_schema=schema, \u2026 # ) outputs.set_value(output_key, result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file.import"},{"location":"modules_list/#fileload","text":"Documentation Load a file and its metadata. This module does not read or load the content of a file, but contains the path to the local representation/version of the file so it can be read by a subsequent process. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadLocalFileModule module_name kiara_modules.core.file full_name kiara_modules.core.file.LoadLocalFil\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") path = os.path.join(base_path, rel_path) file_model = KiaraFile.load_file(path) outputs.set_value(\"file\", file_model) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file.load"},{"location":"modules_list/#filemetadata","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name FileMetadataModule module_name kiara_modules.core.file full_name kiara_modules.core.file.FileMetadata\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file.metadata"},{"location":"modules_list/#filestore","text":"Documentation Save a file to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreFileTypeModule module_name kiara_modules.core.file full_name kiara_modules.core.file.StoreFileTyp\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file.store"},{"location":"modules_list/#file_bundleimport","text":"Documentation Import a file bundle into the kiara data store. This module will support multiple source types and profiles in the future, but at the moment only import from local folder is supported. Thus, requiring the config value 'local' for 'source_profile', and 'folder_path' for 'source_type'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. source_profile string The name of yes the source profile. Used to distinguish different input categories for the same input type. source_type string The type of yes the source to import from. Module config -- no config -- Python class class_name DefaultFileBundleImportModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.Defau\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_type: str = self.get_config_value(\"sour\u2026 source = inputs.get_value_data(source_profile) if self.get_target_value_type() == \"any\": output_key: str = \"value_item\" else: output_key = self.get_target_value_type() func_name = f\"import_from__{source_profile}__{\u2026 if not hasattr(self, func_name): raise Exception( f\"Can't import '{source_type}' value: \u2026 ) func = getattr(self, func_name) # TODO: check signature? result = func(source) # schema = ValueSchema(type=self.get_target_va\u2026 # value_lineage = ValueLineage.from_module_and\u2026 # module=self, output_name=output_key, inp\u2026 # ) # value: Value = self._kiara.data_registry.reg\u2026 # value_data=result, value_schema=schema, \u2026 # ) outputs.set_value(output_key, result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file_bundle.import"},{"location":"modules_list/#file_bundleload","text":"Documentation Load a file bundle and its metadata. This module does not read or load the content of all included files, but contains the path to the local representation/version of them so they can be read by a subsequent process. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadFileBundleModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.LoadF\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") path = os.path.join(base_path, rel_path) included_files = inputs.get_value_data(\"includ\u2026 excluded_dirs = inputs.get_value_data(\"exclude\u2026 excluded_files = inputs.get_value_data(\"exclud\u2026 import_config = FolderImportConfig( include_files=included_files, exclude_dirs=excluded_dirs, excluded_files=excluded_files, ) bundle = KiaraFileBundle.import_folder(source=\u2026 outputs.set_values(file_bundle=bundle) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file_bundle.load"},{"location":"modules_list/#file_bundlemetadata","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name FileBundleMetadataModule module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.FileB\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file_bundle.metadata"},{"location":"modules_list/#file_bundlestore","text":"Documentation Save a file bundle to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreFileBundleType module_name kiara_modules.core.file_bundle full_name kiara_modules.core.file_bundle.Store\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"file_bundle.store"},{"location":"modules_list/#genericrestore_from_json","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name RestoreFromJsonDictModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.RestoreFr\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 base_path = inputs.get_value_data(\"base_path\") file_name = inputs.get_value_data(\"file_name\") full_path = os.path.join(base_path, file_name) if not os.path.exists(full_path): raise KiaraProcessingException( f\"Can't deserialize dict, path to file\u2026 ) if not os.path.isfile(os.path.realpath(full_pa\u2026 raise KiaraProcessingException( f\"Can't deserialize dict, path is not \u2026 ) with open(full_path, \"r\") as f: content = f.read() data = orjson.loads(content) outputs.set_value(\"value_item\", data) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"generic.restore_from_json"},{"location":"modules_list/#genericrestore_scalar","text":"Documentation Utility module, only used internally. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type of yes the scalar to load. Module config -- no config -- Python class class_name RestoreScalarModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.RestoreSc\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 data = inputs.get_value_obj(\"scalar_data\") outputs.set_value(\"value_item\", data) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"generic.restore_scalar"},{"location":"modules_list/#genericstore","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name StoreScalarModule module_name kiara_modules.core.generic full_name kiara_modules.core.generic.StoreScal\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"generic.store"},{"location":"modules_list/#jsonto_json","text":"Documentation Convert arbitrary types into json. Very early days for this module, it doesn't support a lot of types yet. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. source_type string The source type. yes target_type string The target type. yes Module config -- no config -- Python class class_name ToJsonModuleOld module_name kiara_modules.core.json full_name kiara_modules.core.json.ToJsonModule\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"source_value\") if value.value_schema.type != self.source_type: raise KiaraProcessingException( f\"Can't convert value of source type '\u2026 ) config = inputs.get_value_data(\"config\") if config is None: config = {} target_value = self.convert(value=value, confi\u2026 # TODO: validate value? outputs.set_value(\"target_value\", target_value) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"json.to_json"},{"location":"modules_list/#listcontains","text":"Documentation Check whether an element is in a list. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name IncludedInListCheckModule module_name kiara_modules.core.list full_name kiara_modules.core.list.IncludedInLi\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 item_list = inputs.get_value_data(\"list\") item = inputs.get_value_data(\"item\") outputs.set_value(\"is_included\", item in item_\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"list.contains"},{"location":"modules_list/#liststore","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. options integer The options to no use for the json serialization. Check https://github.c\u2026 for details. file_name string The name of the no serialized file. Module config -- no config -- Python class class_name StoreDictModule module_name kiara_modules.core.list full_name kiara_modules.core.list.StoreDictMod\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"list.store"},{"location":"modules_list/#logicand","text":"Documentation Returns 'True' if both inputs are 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name AndModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.AndModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 time.sleep(self.config.delay) # type: ignore outputs.set_value( \"y\", inputs.get_value_data(\"a\") and inputs\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.and"},{"location":"modules_list/#logicnot","text":"Documentation Negates the input. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name NotModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.NotModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 \"\"\"Negates the input boolean.\"\"\" time.sleep(self.config.get(\"delay\")) # type: \u2026 outputs.set_value(\"y\", not inputs.get_value_da\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.not"},{"location":"modules_list/#logicor","text":"Documentation Returns 'True' if one of the inputs is 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. delay number the delay in no seconds from processing start to when the output is returned. Module config -- no config -- Python class class_name OrModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.OrModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 time.sleep(self.config.get(\"delay\")) # type: \u2026 outputs.set_value(\"y\", inputs.get_value_data(\"\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.or"},{"location":"modules_list/#stringdeserialize","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. serialization\u2026 string The yes serialization type that was used to serialize the value. Module config -- no config -- Python class class_name DeserializeStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.Deserializ\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 serialization_type = self.get_config_value(\"se\u2026 if serialization_type not in [\"json\"]: raise KiaraProcessingException( f\"Can't deserialize string: serialisat\u2026 ) serialized = inputs.get_value_data(\"serialized\u2026 outputs.set_value(\"value_item\", serialized) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"string.deserialize"},{"location":"modules_list/#stringmagic","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name MagicModule module_name kiara_modules.core.string full_name kiara_modules.core.string.MagicModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 pass \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"string.magic"},{"location":"modules_list/#stringmatch_regex","text":"Documentation Match a string using a regular expression. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. regex string The regex to yes apply. only_first_ma\u2026 boolean Whether to no only return the first match, or all matches. Module config -- no config -- Python class class_name RegexModule module_name kiara_modules.core.string full_name kiara_modules.core.string.RegexModule Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 text = inputs.get_value_data(\"text\") regex = self.get_config_value(\"regex\") matches = re.findall(regex, text) if not matches: raise KiaraProcessingException(f\"No match \u2026 if self.get_config_value(\"only_first_match\"): result = matches[0] else: result = matches outputs.set_value(\"text\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"string.match_regex"},{"location":"modules_list/#stringreplace","text":"Documentation Replace a string if it matches a key in a mapping dictionary. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. replacement_m\u2026 object A map, yes containing the strings to be replaced as keys, and the replacements as values. default_value string The default no value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself. Module config -- no config -- Python class class_name ReplaceStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.ReplaceStr\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 text = inputs.get_value_data(\"text\") repl_map = self.get_config_value(\"replacement_\u2026 default = self.get_config_value(\"default_value\u2026 if text not in repl_map.keys(): if default is None: result = text else: result = default else: result = repl_map[text] outputs.set_value(\"text\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"string.replace"},{"location":"modules_list/#stringserialize","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. value_type string The type of yes the source value. serialization\u2026 string The type of yes the converted value. Module config -- no config -- Python class class_name SerializeStringModule module_name kiara_modules.core.string full_name kiara_modules.core.string.SerializeS\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_type: str = self.get_config_value(\"value\u2026 value_obj = inputs.get_value_obj(\"value_item\") serialization_type = self.get_config_value(\"se\u2026 if value_type != value_obj.type_name: raise KiaraProcessingException( f\"Invalid type ({value_obj.type_name})\u2026 ) if not hasattr(self, f\"to_{serialization_type}\u2026 # this can never happen, I think raise Exception( f\"Module '{self._module_type_id}' can'\u2026 ) func = getattr(self, f\"to_{serialization_type}\u2026 serialized = func(value_obj) if isinstance(serialized, typing.Mapping): serialized = DeserializeConfig(**serialize\u2026 if not isinstance(serialized, DeserializeConfi\u2026 raise KiaraProcessingException( f\"Invalid serialization result type: {\u2026 ) outputs.set_values( deserialize_config=serialized, value_info=\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"string.serialize"},{"location":"modules_list/#tableconvert","text":"Documentation Convert an Arrow table. This module supportes two conversion targets currently: \u2022 bytes: a memoryview of the byte-representation of the Table \u2022 string: the base64-encoded byte-representation of the Table Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. source_profile string The profile yes of the source value. target_type string The type of yes the value to convert to. allow_none_in\u2026 boolean Whether to no allow 'none' source values, if one is encountered 'none' is returned. ignore_errors boolean Whether to no ignore convert errors and omit the failed items. Module config -- no config -- Python class class_name ConvertToTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.ConvertToTa\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 source_profile: str = self.get_config_value(\"s\u2026 source_config: typing.Mapping[ str, typing.Mapping[str, typing.Any] ] = self._kiara.type_mgmt.get_type_config_for_\u2026 source_type = source_config[\"type\"] target_type: str = self.get_config_value(\"targ\u2026 allow_none: bool = self.get_config_value(\"allo\u2026 source: Value = inputs.get_value_obj(source_pr\u2026 if source_type != source.type_name: raise KiaraProcessingException( f\"Invalid type ({source.type_name}) of\u2026 ) if not source.is_set or source.is_none: if allow_none: outputs.set_value(\"value_item\", None) return else: raise KiaraProcessingException(\"No sou\u2026 if not hasattr(self, f\"from_{source_profile}\"): raise Exception( f\"Module '{self._module_type_id}' can'\u2026 ) func = getattr(self, f\"from_{source_profile}\") converted = func(source) outputs.set_value(target_type, converted) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.convert"},{"location":"modules_list/#tablecut_column","text":"Documentation Cut off one column from a table, returning an array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CutColumnModule module_name kiara_modules.core.table full_name kiara_modules.core.table.CutColumnMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa table_value = inputs.get_value_obj(\"table\") column_name: str = inputs.get_value_data(\"colu\u2026 available = table_value.get_metadata(\"table\")[\u2026 if column_name not in available: raise KiaraProcessingException( f\"Invalid column name '{column_name}'.\u2026 ) table: pa.Table = inputs.get_value_data(\"table\u2026 column = table.column(column_name) outputs.set_value(\"array\", column) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.cut_column"},{"location":"modules_list/#tableexport","text":"Documentation Export a table object to disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name ExportArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.ExportArrow\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa from pyarrow import feather table: pa.Table = inputs.get_value_data(\"table\u2026 full_path: str = inputs.get_value_data(\"path\") force_overwrite = inputs.get_value_data(\"force\u2026 format: str = inputs.get_value_data(\"format\") compression = inputs.get_value_data(\"compressi\u2026 if compression not in [\"zstd\", \"lz4\", \"uncompr\u2026 raise KiaraProcessingException( f\"Invalid compression format '{compres\u2026 ) if format != \"feather\": raise KiaraProcessingException( f\"Can't export table to format '{forma\u2026 ) if os.path.exists(full_path) and not force_ove\u2026 raise KiaraProcessingException( f\"Can't write table to file, file alre\u2026 ) os.makedirs(os.path.dirname(full_path), exist_\u2026 feather.write_feather(table, full_path, compre\u2026 result = { \"module_type\": \"table.load\", \"base_path_input_name\": \"base_path\", \"inputs\": { \"base_path\": os.path.dirname(full_path\u2026 \"rel_path\": os.path.basename(full_path\u2026 \"format\": format, }, \"value_id\": NO_VALUE_ID_MARKER, \"output_name\": \"table\", } outputs.set_value(\"load_config\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.export"},{"location":"modules_list/#tablefilterwith_mask","text":"Documentation Filter a table using a mask array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CreateFilteredTableModule module_name kiara_modules.core.table.filter full_name kiara_modules.core.table.filter.Crea\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_table: pa.Table = inputs.get_value_data(\u2026 filter_array: pa.Array = inputs.get_value_data\u2026 filtered = input_table.filter(filter_array) outputs.set_value(\"table\", filtered) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.filter.with_mask"},{"location":"modules_list/#tableload","text":"Documentation Load a table object from disk. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name LoadArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.LoadArrowTa\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 from pyarrow import feather base_path = inputs.get_value_data(\"base_path\") rel_path = inputs.get_value_data(\"rel_path\") format = inputs.get_value_data(\"format\") if format != \"feather\": raise NotImplementedError() path = os.path.join(base_path, rel_path) table = feather.read_table(path) outputs.set_value(\"table\", table) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.load"},{"location":"modules_list/#tablemap_column","text":"Documentation Map the items of one column of a table onto an array, using another module. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. module_type string The name of the yes kiara module to use to filter the input data. module_config object The config for no the kiara filter module. input_name string The name of the no input name of the module which will receive the rows from our input table. Can be omitted if the configured module only has a single input. output_name string The name of the no output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. Module config -- no config -- Python class class_name MapColumnModule module_name kiara_modules.core.table full_name kiara_modules.core.table.MapColumnMo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa table: pa.Table = inputs.get_value_data(\"table\u2026 column_name = inputs.get_value_data(\"column_na\u2026 if column_name not in table.column_names: raise KiaraProcessingException( f\"Table column '{column_name}' not ava\u2026 ) input_array: pa.Array = table.column(column_na\u2026 init_data: typing.Dict[str, typing.Any] = {} for input_name in self.input_schemas.keys(): if input_name in [\"table\", \"column_name\", \u2026 continue init_data[input_name] = inputs.get_value_o\u2026 result_list = map_with_module( input_array, module_input_name=self.module_input_name, module_obj=self.child_module, init_data=init_data, module_output_name=self.module_output_name, ) outputs.set_value(\"array\", pa.array(result_lis\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.map_column"},{"location":"modules_list/#tablemerge","text":"Documentation Create a table from other tables and/or arrays. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. input_schema object A dict yes describing the inputs for this merge process. Module config -- no config -- Python class class_name MergeTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.MergeTableM\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa input_schema: typing.Dict[str, typing.Any] = s\u2026 \"input_schema\" ) sources = {} for field_name in input_schema.keys(): sources[field_name] = inputs.get_value_dat\u2026 len_dict = {} arrays = [] column_names = [] for source_key, table_or_column in sources.ite\u2026 if isinstance(table_or_column, pa.Table): rows = table_or_column.num_rows for name in table_or_column.schema.nam\u2026 column = table_or_column.column(na\u2026 arrays.append(column) column_names.append(name) elif isinstance(table_or_column, (pa.Array\u2026 rows = len(table_or_column) arrays.append(table_or_column) column_names.append(source_key) else: raise KiaraProcessingException( f\"Can't merge table: invalid type \u2026 ) len_dict[source_key] = rows all_rows = None for source_key, rows in len_dict.items(): if all_rows is None: all_rows = rows else: if all_rows != rows: all_rows = None break if all_rows is None: len_str = \"\" for name, rows in len_dict.items(): len_str = f\" {name} ({rows})\" raise KiaraProcessingException( f\"Can't merge table, sources have diff\u2026 ) table = pa.Table.from_arrays(arrays=arrays, na\u2026 outputs.set_value(\"table\", table) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.merge"},{"location":"modules_list/#tablemetadata","text":"Documentation Extract metadata from a table object. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name TableMetadataModule module_name kiara_modules.core.table full_name kiara_modules.core.table.TableMetada\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_name = self.value_type if input_name == \"any\": input_name = \"value_item\" value = inputs.get_value_obj(input_name) if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict(exclude_none=True) # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.metadata"},{"location":"modules_list/#tablequerygraphql","text":"Documentation Execute a graphql aggregation query against an (Arrow) table. References: - https://vaex.io/docs/example_graphql.html Examples: An example for a query could be: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 { \u2502 \u2502 df(where: { \u2502 \u2502 Language: {_eq: \"German\"} \u2502 \u2502 } ) { \u2502 \u2502 \u2502 \u2502 row(limit: 10) { \u2502 \u2502 Label \u2502 \u2502 City \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name QueryTableGraphQL module_name kiara_modules.core.table.query full_name kiara_modules.core.table.query.Query\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import vaex table = inputs.get_value_data(\"table\") query = inputs.get_value_data(\"query\") df = vaex.from_arrow_table(table) result = df.graphql.execute(query) outputs.set_value(\"query_result\", result.to_di\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.query.graphql"},{"location":"modules_list/#tablequerysql","text":"Documentation Execute a sql query against an (Arrow) table. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. query string The query to no execute. If not specified, the user will be able to provide their own. relation_name string The name the no table is referred to in the sql query. If not specified, the user will be able to provide their own. Module config -- no config -- Python class class_name QueryTableSQL module_name kiara_modules.core.table.query full_name kiara_modules.core.table.query.Query\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import duckdb if self.get_config_value(\"query\") is None: _query: str = inputs.get_value_data(\"query\u2026 _relation_name: str = inputs.get_value_dat\u2026 else: _query = self.get_config_value(\"query\") _relation_name = self.get_config_value(\"re\u2026 if _relation_name.upper() in RESERVED_SQL_KEYW\u2026 raise KiaraProcessingException( f\"Invalid relation name '{_relation_na\u2026 ) _table = inputs.get_value_data(\"table\") relation: duckdb.DuckDBPyRelation = duckdb.arr\u2026 result: duckdb.DuckDBPyResult = relation.query\u2026 print(result.arrow()) outputs.set_value(\"query_result\", result.arrow\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.query.sql"},{"location":"modules_list/#tablesample","text":"Documentation Sample a table. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. sample_type string The sample yes method. Module config -- no config -- Python class class_name SampleTableModule module_name kiara_modules.core.table full_name kiara_modules.core.table.SampleTable\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 sample_size: int = inputs.get_value_data(\"samp\u2026 sample_type: str = self.get_config_value(\"samp\u2026 if sample_size < 0: raise KiaraProcessingException( f\"Invalid sample size '{sample_size}':\u2026 ) input_name = self.get_value_type() if input_name == \"any\": input_name = \"value_item\" value: Value = inputs.get_value_obj(input_name) func = getattr(self, f\"sample_{sample_type}\") result = func(value=value, sample_size=sample_\u2026 outputs.set_value(\"sampled_value\", result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.sample"},{"location":"modules_list/#tablestore","text":"Documentation -- n/a -- Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. value_type string The type of the yes value to save. compression string The compression no to use when saving the table. Module config -- no config -- Python class class_name StoreArrowTable module_name kiara_modules.core.table full_name kiara_modules.core.table.StoreArrowT\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 field_name = self.get_config_value(\"value_type\u2026 if field_name == \"any\": field_name = \"value_item\" value_obj: Value = inputs.get_value_obj(field_\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 result = self.store_value(value=value_obj, bas\u2026 if isinstance(result, typing.Mapping): load_config = result result_value = value_obj elif isinstance(result, tuple): load_config = result[0] if result[1]: result_value = result[1] else: result_value = value_obj else: raise KiaraProcessingException( f\"Invalid result type for 'store_value\u2026 ) load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values( metadata=None, lineage=None, **{\"load_conf\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.store"},{"location":"modules_list/#valuedata_profile","text":"Documentation Generate a data profile report for a dataset. This uses the DataProfiler Python library, check out its documentation for more details. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The value type to yes profile. Module config -- no config -- Python class class_name DataProfilerModule module_name kiara_modules.core.value full_name kiara_modules.core.value.DataProfile\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa from dataprofiler import Data, Profiler, Profi\u2026 set_verbosity(logging.WARNING) value_type = self.get_config_value(\"value_type\u2026 profile_options = ProfilerOptions() profile_options.structured_options.data_labele\u2026 profile_options.unstructured_options.data_labe\u2026 if value_type == \"table\": table_item: pa.Table = inputs.get_value_da\u2026 pd = table_item.to_pandas() profile = Profiler( pd, options=profile_options ) # Calculate Statistics, Entity Recognit\u2026 report = profile.report() elif value_type == \"file\": file_item: KiaraFile = inputs.get_value_da\u2026 data = Data(file_item.path) profile = Profiler(data, options=profile_o\u2026 report = profile.report() else: raise KiaraProcessingException( f\"Data profiling of value type '{value\u2026 ) outputs.set_value(\"report\", report) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"value.data_profile"},{"location":"modules_list/#yamlto_yaml","text":"Documentation Convert arbitrary types into YAML format. Early days for this module, it doesn't support a whole lot of types yet. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags core Labels package: kiara_modules.core References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults no for this module. source_type string The source type. yes target_type string The target type. yes Module config -- no config -- Python class class_name ToYamlModuleOld module_name kiara_modules.core.yaml full_name kiara_modules.core.yaml.ToYamlModule\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"source_value\") if value.value_schema.type != self.source_type: raise KiaraProcessingException( f\"Can't convert value of source type '\u2026 ) config = inputs.get_value_data(\"config\") if config is None: config = {} target_value = self.convert(value=value, confi\u2026 # TODO: validate value? outputs.set_value(\"target_value\", target_value) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"yaml.to_yaml"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. array.restore \u00b6 Documentation Load a column from a table object, returning an array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core, array Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name ArrayRestorePipelineModule module_name kiara_modules.core.array full_name kiara_modules.core.array.ArrayRestorePipeli\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_table\", \"input_links\": {} }, { \"module_type\": \"table.cut_column\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"cut_column\", \"input_links\": { \"table\": [ { \"step_id\": \"load_table\", \"value_name\": \"table\", \"sub_value\": null } ] } } ], \"input_aliases\": \"auto\", \"output_aliases\": \"auto\", \"documentation\": \"Load a column from a table object, re\u2026 \"context\": {}, \"module_type_name\": \"restore\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.nand \u00b6 Documentation Returns 'False' if both inputs are 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicNandPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicNandPipelineM\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.and\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"and\", \"input_links\": {} }, { \"module_type\": \"logic.not\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"not\", \"input_links\": { \"a\": [ { \"step_id\": \"and\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"and__a\": \"a\", \"and__b\": \"b\" }, \"output_aliases\": { \"not__y\": \"y\" }, \"documentation\": \"Returns 'False' if both inputs are 'T\u2026 \"context\": {}, \"module_type_name\": \"nand\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.nor \u00b6 Documentation Returns 'True' if both inputs are 'False'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicNorPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicNorPipelineMo\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.or\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"or\", \"input_links\": {} }, { \"module_type\": \"logic.not\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"not\", \"input_links\": { \"a\": [ { \"step_id\": \"or\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"or__a\": \"a\", \"or__b\": \"b\" }, \"output_aliases\": { \"not__y\": \"y\" }, \"documentation\": \"Returns 'True' if both inputs are 'Fa\u2026 \"context\": {}, \"module_type_name\": \"nor\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 logic.xor \u00b6 Documentation Returns 'True' if exactly one of it's two inputs is 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicXorPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicXorPipelineMo\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.or\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"or\", \"input_links\": {} }, { \"module_type\": \"logic.nand\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"nand\", \"input_links\": {} }, { \"module_type\": \"logic.and\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"and\", \"input_links\": { \"a\": [ { \"step_id\": \"or\", \"value_name\": \"y\", \"sub_value\": null } ], \"b\": [ { \"step_id\": \"nand\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"or__a\": \"a\", \"or__b\": \"b\", \"nand__a\": \"a\", \"nand__b\": \"b\" }, \"output_aliases\": { \"and__y\": \"y\" }, \"documentation\": \"Returns 'True' if exactly one of it's\u2026 \"context\": {}, \"module_type_name\": \"xor\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table.filter.by_date \u00b6 Documentation Filter a table by a date or date range. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name TableFilterByDatePipelineModule module_name kiara_modules.core.table full_name kiara_modules.core.table.TableFilterByDateP\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.map_column\", \"module_config\": { \"module_type\": \"date.range_check\", \"input_name\": \"date\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_filter_mask\", \"input_links\": {} }, { \"module_type\": \"table.filter.with_mask\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"filtered_table\", \"input_links\": { \"mask\": [ { \"step_id\": \"create_filter_mask\", \"value_name\": \"array\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"create_filter_mask__table\": \"table\", \"create_filter_mask__column_name\": \"column_name\", \"create_filter_mask__earliest\": \"earliest\", \"create_filter_mask__latest\": \"latest\", \"filtered_table__table\": \"table\" }, \"output_aliases\": \"auto\", \"documentation\": \"Filter a table by a date or date rang\u2026 \"context\": {}, \"module_type_name\": \"by_date\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"pipelines_list/#arrayrestore","text":"Documentation Load a column from a table object, returning an array. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core, array Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name ArrayRestorePipelineModule module_name kiara_modules.core.array full_name kiara_modules.core.array.ArrayRestorePipeli\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_table\", \"input_links\": {} }, { \"module_type\": \"table.cut_column\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"cut_column\", \"input_links\": { \"table\": [ { \"step_id\": \"load_table\", \"value_name\": \"table\", \"sub_value\": null } ] } } ], \"input_aliases\": \"auto\", \"output_aliases\": \"auto\", \"documentation\": \"Load a column from a table object, re\u2026 \"context\": {}, \"module_type_name\": \"restore\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"array.restore"},{"location":"pipelines_list/#logicnand","text":"Documentation Returns 'False' if both inputs are 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicNandPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicNandPipelineM\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.and\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"and\", \"input_links\": {} }, { \"module_type\": \"logic.not\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"not\", \"input_links\": { \"a\": [ { \"step_id\": \"and\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"and__a\": \"a\", \"and__b\": \"b\" }, \"output_aliases\": { \"not__y\": \"y\" }, \"documentation\": \"Returns 'False' if both inputs are 'T\u2026 \"context\": {}, \"module_type_name\": \"nand\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.nand"},{"location":"pipelines_list/#logicnor","text":"Documentation Returns 'True' if both inputs are 'False'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicNorPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicNorPipelineMo\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.or\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"or\", \"input_links\": {} }, { \"module_type\": \"logic.not\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"not\", \"input_links\": { \"a\": [ { \"step_id\": \"or\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"or__a\": \"a\", \"or__b\": \"b\" }, \"output_aliases\": { \"not__y\": \"y\" }, \"documentation\": \"Returns 'True' if both inputs are 'Fa\u2026 \"context\": {}, \"module_type_name\": \"nor\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.nor"},{"location":"pipelines_list/#logicxor","text":"Documentation Returns 'True' if exactly one of it's two inputs is 'True'. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name LogicXorPipelineModule module_name kiara_modules.core.logic full_name kiara_modules.core.logic.LogicXorPipelineMo\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"logic.or\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"or\", \"input_links\": {} }, { \"module_type\": \"logic.nand\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"nand\", \"input_links\": {} }, { \"module_type\": \"logic.and\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"and\", \"input_links\": { \"a\": [ { \"step_id\": \"or\", \"value_name\": \"y\", \"sub_value\": null } ], \"b\": [ { \"step_id\": \"nand\", \"value_name\": \"y\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"or__a\": \"a\", \"or__b\": \"b\", \"nand__a\": \"a\", \"nand__b\": \"b\" }, \"output_aliases\": { \"and__y\": \"y\" }, \"documentation\": \"Returns 'True' if exactly one of it's\u2026 \"context\": {}, \"module_type_name\": \"xor\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"logic.xor"},{"location":"pipelines_list/#tablefilterby_date","text":"Documentation Filter a table by a date or date range. Origin Authors Markus Binsteiner (markus@frkl.io) Context Tags pipeline, core Labels package: kiara_modules.core pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.core/ module_doc: https://dharpa.org/kiara_modules.core/latest\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name TableFilterByDatePipelineModule module_name kiara_modules.core.table full_name kiara_modules.core.table.TableFilterByDateP\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.map_column\", \"module_config\": { \"module_type\": \"date.range_check\", \"input_name\": \"date\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_filter_mask\", \"input_links\": {} }, { \"module_type\": \"table.filter.with_mask\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"filtered_table\", \"input_links\": { \"mask\": [ { \"step_id\": \"create_filter_mask\", \"value_name\": \"array\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"create_filter_mask__table\": \"table\", \"create_filter_mask__column_name\": \"column_name\", \"create_filter_mask__earliest\": \"earliest\", \"create_filter_mask__latest\": \"latest\", \"filtered_table__table\": \"table\" }, \"output_aliases\": \"auto\", \"documentation\": \"Filter a table by a date or date rang\u2026 \"context\": {}, \"module_type_name\": \"by_date\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"table.filter.by_date"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.core.array/","text":"kiara_modules.core.array \u00b6 ArrayMetadataModule \u00b6 Extract metadata from an 'array' value. MapModule \u00b6 Map a list of values into another list of values. This module must be configured with the type (and optional) configuration of another kiara module. This 'child' module will then be used to compute the array items of the result. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/array/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ] = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The array containing the values the filter is applied on.\" , } } for input_name , schema in self . child_module . input_schemas . items (): assert input_name != \"array\" if input_name == self . module_input_name : continue inputs [ input_name ] = schema return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/array/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"An array of equal length to the input array, containing the 'mapped' values.\" , } } return outputs module_instance_doc ( self ) \u00b6 Return documentation for this instance of the module. If not overwritten, will return this class' method doc() . Source code in core/array/__init__.py def module_instance_doc ( self ) -> str : config : MapModuleConfig = self . config # type: ignore module_type = config . module_type module_config = config . module_config m = self . _kiara . create_module ( module_type = module_type , module_config = module_config ) type_md = m . get_type_metadata () doc = type_md . documentation . full_doc link = type_md . context . get_url_for_reference ( \"module_doc\" ) if not link : link_str = f \"`` { module_type } ``\" else : link_str = f \"[`` { module_type } ``]( { link } )\" result = f \"\"\"Map the values of the input list onto a new list of the same length, using the { link_str } module.\"\"\" if doc and doc != \"-- n/a --\" : result = result + f \" \\n\\n `` { module_type } `` documentation: \\n\\n { doc } \" return result MapModuleConfig pydantic-model \u00b6 input_name : str pydantic-field \u00b6 The name of the input name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single input. module_config : Dict [ str , Any ] pydantic-field \u00b6 The config for the kiara filter module. module_type : str pydantic-field required \u00b6 The name of the kiara module to use to filter the input data. output_name : str pydantic-field \u00b6 The name of the output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. SampleArrayModule \u00b6 Sample an array. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. get_value_type () classmethod \u00b6 Return the value type for this sample module. Source code in core/array/__init__.py @classmethod def get_value_type ( cls ) -> str : return \"array\" StoreArrayTypeModule \u00b6 Save an Arrow array to a file. This module wraps the input array into an Arrow Table, and saves this table as a feather file. The output of this module is a dictionary representing the configuration to be used with kira to re-assemble the array object from disk. store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/array/__init__.py def store_value ( self , value : Value , base_path : str ): import pyarrow as pa from pyarrow import feather array : pa . Array = value . get_value_data () # folder = inputs.get_value_data(\"folder_path\") # file_name = inputs.get_value_data(\"file_name\") # column_name = inputs.get_value_data(\"column_name\") path = os . path . join ( base_path , ARRAY_SAVE_FILE_NAME ) if os . path . exists ( path ): raise KiaraProcessingException ( f \"Can't write file, path already exists: { path } \" ) os . makedirs ( os . path . dirname ( path )) table = pa . Table . from_arrays ([ array ], names = [ ARRAY_SAVE_COLUM_NAME ]) feather . write_feather ( table , path ) load_config = { \"module_type\" : \"array.restore\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : ARRAY_SAVE_FILE_NAME , \"format\" : \"feather\" , \"column_name\" : ARRAY_SAVE_COLUM_NAME , }, \"output_name\" : \"array\" , } return load_config","title":"\u279c\u2007array"},{"location":"api_reference/kiara_modules.core.array/#kiara_modulescorearray","text":"","title":"kiara_modules.core.array"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.ArrayMetadataModule","text":"Extract metadata from an 'array' value.","title":"ArrayMetadataModule"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModule","text":"Map a list of values into another list of values. This module must be configured with the type (and optional) configuration of another kiara module. This 'child' module will then be used to compute the array items of the result.","title":"MapModule"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/array/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ] = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The array containing the values the filter is applied on.\" , } } for input_name , schema in self . child_module . input_schemas . items (): assert input_name != \"array\" if input_name == self . module_input_name : continue inputs [ input_name ] = schema return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/array/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"An array of equal length to the input array, containing the 'mapped' values.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModule.module_instance_doc","text":"Return documentation for this instance of the module. If not overwritten, will return this class' method doc() . Source code in core/array/__init__.py def module_instance_doc ( self ) -> str : config : MapModuleConfig = self . config # type: ignore module_type = config . module_type module_config = config . module_config m = self . _kiara . create_module ( module_type = module_type , module_config = module_config ) type_md = m . get_type_metadata () doc = type_md . documentation . full_doc link = type_md . context . get_url_for_reference ( \"module_doc\" ) if not link : link_str = f \"`` { module_type } ``\" else : link_str = f \"[`` { module_type } ``]( { link } )\" result = f \"\"\"Map the values of the input list onto a new list of the same length, using the { link_str } module.\"\"\" if doc and doc != \"-- n/a --\" : result = result + f \" \\n\\n `` { module_type } `` documentation: \\n\\n { doc } \" return result","title":"module_instance_doc()"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModuleConfig","text":"","title":"MapModuleConfig"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModuleConfig.input_name","text":"The name of the input name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single input.","title":"input_name"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModuleConfig.module_config","text":"The config for the kiara filter module.","title":"module_config"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModuleConfig.module_type","text":"The name of the kiara module to use to filter the input data.","title":"module_type"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.MapModuleConfig.output_name","text":"The name of the output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output.","title":"output_name"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.SampleArrayModule","text":"Sample an array. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run.","title":"SampleArrayModule"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.SampleArrayModule.get_value_type","text":"Return the value type for this sample module. Source code in core/array/__init__.py @classmethod def get_value_type ( cls ) -> str : return \"array\"","title":"get_value_type()"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.StoreArrayTypeModule","text":"Save an Arrow array to a file. This module wraps the input array into an Arrow Table, and saves this table as a feather file. The output of this module is a dictionary representing the configuration to be used with kira to re-assemble the array object from disk.","title":"StoreArrayTypeModule"},{"location":"api_reference/kiara_modules.core.array/#kiara_modules.core.array.__init__.StoreArrayTypeModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/array/__init__.py def store_value ( self , value : Value , base_path : str ): import pyarrow as pa from pyarrow import feather array : pa . Array = value . get_value_data () # folder = inputs.get_value_data(\"folder_path\") # file_name = inputs.get_value_data(\"file_name\") # column_name = inputs.get_value_data(\"column_name\") path = os . path . join ( base_path , ARRAY_SAVE_FILE_NAME ) if os . path . exists ( path ): raise KiaraProcessingException ( f \"Can't write file, path already exists: { path } \" ) os . makedirs ( os . path . dirname ( path )) table = pa . Table . from_arrays ([ array ], names = [ ARRAY_SAVE_COLUM_NAME ]) feather . write_feather ( table , path ) load_config = { \"module_type\" : \"array.restore\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : ARRAY_SAVE_FILE_NAME , \"format\" : \"feather\" , \"column_name\" : ARRAY_SAVE_COLUM_NAME , }, \"output_name\" : \"array\" , } return load_config","title":"store_value()"},{"location":"api_reference/kiara_modules.core.array.utils/","text":"kiara_modules.core.array.utils \u00b6","title":"\u279c\u2007array.utils"},{"location":"api_reference/kiara_modules.core.array.utils/#kiara_modulescorearrayutils","text":"","title":"kiara_modules.core.array.utils"},{"location":"api_reference/kiara_modules.core.bytes/","text":"kiara_modules.core.bytes \u00b6 LoadBytesModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The base path to the file to read.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the file, within the base path.\" , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : \"The content of the file.\" }} StoreBytesTypeModule \u00b6 store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/bytes/__init__.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: path = os . path . join ( base_path , BYTES_SAVE_FILE_NAME ) if os . path . exists ( path ): raise KiaraProcessingException ( f \"Can't write bytes, target path already exists: { path } \" ) os . makedirs ( os . path . dirname ( path ), exist_ok = True ) bytes = value . get_value_data () with open ( path , \"wb\" ) as f : f . write ( bytes ) load_config = { \"module_type\" : \"bytes.load\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : BYTES_SAVE_FILE_NAME }, \"output_name\" : \"bytes\" , } return load_config","title":"\u279c\u2007bytes"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modulescorebytes","text":"","title":"kiara_modules.core.bytes"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modules.core.bytes.__init__.LoadBytesModule","text":"","title":"LoadBytesModule"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modules.core.bytes.__init__.LoadBytesModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The base path to the file to read.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the file, within the base path.\" , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modules.core.bytes.__init__.LoadBytesModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : \"The content of the file.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modules.core.bytes.__init__.StoreBytesTypeModule","text":"","title":"StoreBytesTypeModule"},{"location":"api_reference/kiara_modules.core.bytes/#kiara_modules.core.bytes.__init__.StoreBytesTypeModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/bytes/__init__.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: path = os . path . join ( base_path , BYTES_SAVE_FILE_NAME ) if os . path . exists ( path ): raise KiaraProcessingException ( f \"Can't write bytes, target path already exists: { path } \" ) os . makedirs ( os . path . dirname ( path ), exist_ok = True ) bytes = value . get_value_data () with open ( path , \"wb\" ) as f : f . write ( bytes ) load_config = { \"module_type\" : \"bytes.load\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : BYTES_SAVE_FILE_NAME }, \"output_name\" : \"bytes\" , } return load_config","title":"store_value()"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/","text":"kiara_modules.core.bytes.msgpack \u00b6 DeserializeFromMsgPackModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : \"The msgpack-serialized value.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_type\" : { \"type\" : \"string\" , \"doc\" : \"The type of the value.\" }, \"value_data\" : { \"type\" : \"any\" , \"doc\" : f \"The { self . get_config_value ( 'value_type' ) } value.\" , }, \"value_metadata\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with metadata of the serialized table. The result dict has the metadata key as key, and two sub-values under each key: 'metadata_item' (the actual metadata) and 'metadata_item_schema' (the schema for the metadata).\" , }, } SerializeToMsgPackModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . config . get ( \"value_type\" ), \"doc\" : f \"A { self . get_config_value ( 'value_type' ) } value.\" , } } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : f \"The msgpack-serialized { self . get_config_value ( 'value_type' ) } value.\" , } } SerializeToMsgPackModuleConfig pydantic-model \u00b6 value_type : str pydantic-field required \u00b6 The value type to serialize/deserialize.","title":"\u279c\u2007bytes.msgpack"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modulescorebytesmsgpack","text":"","title":"kiara_modules.core.bytes.msgpack"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.DeserializeFromMsgPackModule","text":"","title":"DeserializeFromMsgPackModule"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.DeserializeFromMsgPackModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : \"The msgpack-serialized value.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.DeserializeFromMsgPackModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_type\" : { \"type\" : \"string\" , \"doc\" : \"The type of the value.\" }, \"value_data\" : { \"type\" : \"any\" , \"doc\" : f \"The { self . get_config_value ( 'value_type' ) } value.\" , }, \"value_metadata\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with metadata of the serialized table. The result dict has the metadata key as key, and two sub-values under each key: 'metadata_item' (the actual metadata) and 'metadata_item_schema' (the schema for the metadata).\" , }, }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.SerializeToMsgPackModule","text":"","title":"SerializeToMsgPackModule"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.SerializeToMsgPackModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . config . get ( \"value_type\" ), \"doc\" : f \"A { self . get_config_value ( 'value_type' ) } value.\" , } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.SerializeToMsgPackModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/bytes/msgpack.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"bytes\" : { \"type\" : \"bytes\" , \"doc\" : f \"The msgpack-serialized { self . get_config_value ( 'value_type' ) } value.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.SerializeToMsgPackModuleConfig","text":"","title":"SerializeToMsgPackModuleConfig"},{"location":"api_reference/kiara_modules.core.bytes.msgpack/#kiara_modules.core.bytes.msgpack.SerializeToMsgPackModuleConfig.value_type","text":"The value type to serialize/deserialize.","title":"value_type"},{"location":"api_reference/kiara_modules.core.date/","text":"kiara_modules.core.date \u00b6 A collection of date related modules. Most of those are very bare-bones, not really dealing with more advanced (but very important) concepts like timezones and resolution yet. DateRangeCheckModule \u00b6 Check whether a date falls within a specified date range. If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'. Return True if that's the case, otherwise False . create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Dict [ str , typing . Any ]] = { \"date\" : { \"type\" : \"date\" , \"doc\" : \"The date to check.\" }, \"earliest\" : { \"type\" : \"date\" , \"doc\" : \"The earliest date that is allowed.\" , \"optional\" : True , }, \"latest\" : { \"type\" : \"date\" , \"doc\" : \"The latest date that is allowed.\" , \"optional\" : True , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"within_range\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean indicating whether the provided date was within the allowed range ('true'), or not ('false')\" , } } return outputs ExtractDateModule \u00b6 Extract a date object from a string. This module is not really smart yet, currently it uses the following regex to extract a date (which might fail in a lot of cases): r\"_(\\d{4}-\\d{2}-\\d{2})_\" create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"date\" : { \"type\" : \"date\" , \"doc\" : \"The date extracted from the input string.\" } }","title":"\u279c\u2007date"},{"location":"api_reference/kiara_modules.core.date/#kiara_modulescoredate","text":"A collection of date related modules. Most of those are very bare-bones, not really dealing with more advanced (but very important) concepts like timezones and resolution yet.","title":"kiara_modules.core.date"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.DateRangeCheckModule","text":"Check whether a date falls within a specified date range. If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'. Return True if that's the case, otherwise False .","title":"DateRangeCheckModule"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.DateRangeCheckModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Dict [ str , typing . Any ]] = { \"date\" : { \"type\" : \"date\" , \"doc\" : \"The date to check.\" }, \"earliest\" : { \"type\" : \"date\" , \"doc\" : \"The earliest date that is allowed.\" , \"optional\" : True , }, \"latest\" : { \"type\" : \"date\" , \"doc\" : \"The latest date that is allowed.\" , \"optional\" : True , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.DateRangeCheckModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"within_range\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean indicating whether the provided date was within the allowed range ('true'), or not ('false')\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.ExtractDateModule","text":"Extract a date object from a string. This module is not really smart yet, currently it uses the following regex to extract a date (which might fail in a lot of cases): r\"_(\\d{4}-\\d{2}-\\d{2})_\"","title":"ExtractDateModule"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.ExtractDateModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.date/#kiara_modules.core.date.ExtractDateModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/date.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"date\" : { \"type\" : \"date\" , \"doc\" : \"The date extracted from the input string.\" } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.dev/","text":"kiara_modules.core.dev \u00b6 Modules that are useful for kiara as well as pipeline-development, as well as testing. DummyModule \u00b6 Module that simulates processing, but uses hard-coded outputs as a result. create_input_schema ( self ) \u00b6 The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in core/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result create_output_schema ( self ) \u00b6 The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in core/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result process ( self , inputs , outputs ) \u00b6 Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in core/dev.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): raise NotImplementedError () # v = self.output_schemas[output_name].type_obj.fake_value() # value_dict[output_name] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict ) DummyProcessingModuleConfig pydantic-model \u00b6 Configuration for the 'dummy' processing module. delay : float pydantic-field \u00b6 The delay in seconds from processing start to when the (dummy) outputs are returned. input_schema : Dict [ str , Dict ] pydantic-field required \u00b6 The input schema for this module. output_schema : Dict [ str , Dict ] pydantic-field required \u00b6 The output schema for this module. outputs : Dict [ str , Any ] pydantic-field \u00b6 The (dummy) output for this module.","title":"\u279c\u2007dev"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modulescoredev","text":"Modules that are useful for kiara as well as pipeline-development, as well as testing.","title":"kiara_modules.core.dev"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyModule","text":"Module that simulates processing, but uses hard-coded outputs as a result.","title":"DummyModule"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyModule.create_input_schema","text":"The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in core/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyModule.create_output_schema","text":"The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in core/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyModule.process","text":"Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in core/dev.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): raise NotImplementedError () # v = self.output_schemas[output_name].type_obj.fake_value() # value_dict[output_name] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict )","title":"process()"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyProcessingModuleConfig","text":"Configuration for the 'dummy' processing module.","title":"DummyProcessingModuleConfig"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyProcessingModuleConfig.delay","text":"The delay in seconds from processing start to when the (dummy) outputs are returned.","title":"delay"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyProcessingModuleConfig.input_schema","text":"The input schema for this module.","title":"input_schema"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyProcessingModuleConfig.output_schema","text":"The output schema for this module.","title":"output_schema"},{"location":"api_reference/kiara_modules.core.dev/#kiara_modules.core.dev.DummyProcessingModuleConfig.outputs","text":"The (dummy) output for this module.","title":"outputs"},{"location":"api_reference/kiara_modules.core.dict/","text":"kiara_modules.core.dict \u00b6 SaveDictModule \u00b6 store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/dict.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import orjson options = self . get_config_value ( \"options\" ) file_name = self . get_config_value ( \"file_name\" ) json_str = orjson . dumps ( value . get_value_data (), option = options ) bp = Path ( base_path ) bp . mkdir ( parents = True , exist_ok = True ) full_path = bp / file_name full_path . write_bytes ( json_str ) load_config = { \"module_type\" : \"generic.restore_from_json\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"file_name\" : self . get_config_value ( \"file_name\" ), }, \"output_name\" : \"value_item\" , } return load_config","title":"\u279c\u2007dict"},{"location":"api_reference/kiara_modules.core.dict/#kiara_modulescoredict","text":"","title":"kiara_modules.core.dict"},{"location":"api_reference/kiara_modules.core.dict/#kiara_modules.core.dict.SaveDictModule","text":"","title":"SaveDictModule"},{"location":"api_reference/kiara_modules.core.dict/#kiara_modules.core.dict.SaveDictModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/dict.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import orjson options = self . get_config_value ( \"options\" ) file_name = self . get_config_value ( \"file_name\" ) json_str = orjson . dumps ( value . get_value_data (), option = options ) bp = Path ( base_path ) bp . mkdir ( parents = True , exist_ok = True ) full_path = bp / file_name full_path . write_bytes ( json_str ) load_config = { \"module_type\" : \"generic.restore_from_json\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"file_name\" : self . get_config_value ( \"file_name\" ), }, \"output_name\" : \"value_item\" , } return load_config","title":"store_value()"},{"location":"api_reference/kiara_modules.core.file/","text":"kiara_modules.core.file \u00b6 DefaultFileImportModule \u00b6 Import an external file into a kiara session. LoadLocalFileModule \u00b6 Load a file and its metadata. This module does not read or load the content of a file, but contains the path to the local representation/version of the file so it can be read by a subsequent process. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/file.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the base directory where the file is stored.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the file within the base directory.\" , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/file.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file\" : { \"type\" : \"file\" , \"doc\" : \"A representation of the original file content in the kiara data registry.\" , } } StoreFileTypeModule \u00b6 Save a file to disk. store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/file.py def store_value ( self , value : Value , base_path : str ) -> typing . Tuple [ typing . Dict [ str , typing . Any ], typing . Any ]: file_obj = value . get_value_data () file_name = file_obj . file_name full_target = os . path . join ( base_path , file_name ) os . makedirs ( os . path . dirname ( full_target ), exist_ok = True ) if os . path . exists ( full_target ): raise KiaraProcessingException ( f \"Can't save file, path already exists: { full_target } \" ) fm = file_obj . copy_file ( full_target , is_onboarded = True ) load_config = { \"module_type\" : \"file.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : file_name }, \"output_name\" : \"file\" , } return ( load_config , fm )","title":"\u279c\u2007file"},{"location":"api_reference/kiara_modules.core.file/#kiara_modulescorefile","text":"","title":"kiara_modules.core.file"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.DefaultFileImportModule","text":"Import an external file into a kiara session.","title":"DefaultFileImportModule"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.LoadLocalFileModule","text":"Load a file and its metadata. This module does not read or load the content of a file, but contains the path to the local representation/version of the file so it can be read by a subsequent process.","title":"LoadLocalFileModule"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.LoadLocalFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/file.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the base directory where the file is stored.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the file within the base directory.\" , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.LoadLocalFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/file.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file\" : { \"type\" : \"file\" , \"doc\" : \"A representation of the original file content in the kiara data registry.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.StoreFileTypeModule","text":"Save a file to disk.","title":"StoreFileTypeModule"},{"location":"api_reference/kiara_modules.core.file/#kiara_modules.core.file.StoreFileTypeModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/file.py def store_value ( self , value : Value , base_path : str ) -> typing . Tuple [ typing . Dict [ str , typing . Any ], typing . Any ]: file_obj = value . get_value_data () file_name = file_obj . file_name full_target = os . path . join ( base_path , file_name ) os . makedirs ( os . path . dirname ( full_target ), exist_ok = True ) if os . path . exists ( full_target ): raise KiaraProcessingException ( f \"Can't save file, path already exists: { full_target } \" ) fm = file_obj . copy_file ( full_target , is_onboarded = True ) load_config = { \"module_type\" : \"file.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : file_name }, \"output_name\" : \"file\" , } return ( load_config , fm )","title":"store_value()"},{"location":"api_reference/kiara_modules.core.file_bundle/","text":"kiara_modules.core.file_bundle \u00b6 DefaultFileBundleImportModule \u00b6 Import a file bundle into the kiara data store. This module will support multiple source types and profiles in the future, but at the moment only import from local folder is supported. Thus, requiring the config value 'local' for 'source_profile', and 'folder_path' for 'source_type'. LoadFileBundleModule \u00b6 Load a file bundle and its metadata. This module does not read or load the content of all included files, but contains the path to the local representation/version of them so they can be read by a subsequent process. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/file_bundle.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The base path where the folder lives.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the folder, within the base path location.\" , }, \"include_files\" : { \"type\" : \"list\" , \"doc\" : \"A list of strings, include all files where the filename ends with one of those strings. \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"optional\" : True , }, \"exclude_dirs\" : { \"type\" : \"list\" , \"doc\" : f \"A list of strings, exclude all folders whose name ends with that string. Defaults to: { DEFAULT_EXCLUDE_DIRS } . \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"default\" : DEFAULT_EXCLUDE_DIRS , \"optional\" : True , }, \"exclude_files\" : { \"type\" : \"list\" , \"doc\" : f \"A list of strings, exclude all files that end with that one of those strings (takes precedence over 'include_files'). Defaults to: { DEFAULT_EXCLUDE_FILES } \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"default\" : DEFAULT_EXCLUDE_FILES , \"optional\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/file_bundle.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_bundle\" : { \"type\" : \"file_bundle\" , \"doc\" : \"The collection of files contained in the bundle.\" , } } StoreFileBundleType \u00b6 Save a file bundle to disk. store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/file_bundle.py def store_value ( self , value : Value , base_path : str ) -> typing . Tuple [ typing . Dict [ str , typing . Any ], typing . Any ]: bundle : KiaraFileBundle = value . get_value_data () rel_path = bundle . bundle_name target_path = os . path . join ( base_path , rel_path ) fb = bundle . copy_bundle ( target_path , is_onboarded = True ) # # the following changes the input value, which is usually not allowed, but the file_bundle type is a special case # bundle.included_files = fb.included_files # bundle.is_onboarded = True # bundle.path = fb.path # for path, f in bundle.included_files.items(): # f.is_onboarded = True load_config = { \"module_type\" : \"file_bundle.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : rel_path }, \"output_name\" : \"file_bundle\" , } return ( load_config , fb )","title":"\u279c\u2007file_bundle"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modulescorefile_bundle","text":"","title":"kiara_modules.core.file_bundle"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.DefaultFileBundleImportModule","text":"Import a file bundle into the kiara data store. This module will support multiple source types and profiles in the future, but at the moment only import from local folder is supported. Thus, requiring the config value 'local' for 'source_profile', and 'folder_path' for 'source_type'.","title":"DefaultFileBundleImportModule"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.LoadFileBundleModule","text":"Load a file bundle and its metadata. This module does not read or load the content of all included files, but contains the path to the local representation/version of them so they can be read by a subsequent process.","title":"LoadFileBundleModule"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.LoadFileBundleModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/file_bundle.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The base path where the folder lives.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path of the folder, within the base path location.\" , }, \"include_files\" : { \"type\" : \"list\" , \"doc\" : \"A list of strings, include all files where the filename ends with one of those strings. \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"optional\" : True , }, \"exclude_dirs\" : { \"type\" : \"list\" , \"doc\" : f \"A list of strings, exclude all folders whose name ends with that string. Defaults to: { DEFAULT_EXCLUDE_DIRS } . \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"default\" : DEFAULT_EXCLUDE_DIRS , \"optional\" : True , }, \"exclude_files\" : { \"type\" : \"list\" , \"doc\" : f \"A list of strings, exclude all files that end with that one of those strings (takes precedence over 'include_files'). Defaults to: { DEFAULT_EXCLUDE_FILES } \\n\\n Only full string matches are supported at the moment, globs and regex might be in the future.\" , \"default\" : DEFAULT_EXCLUDE_FILES , \"optional\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.LoadFileBundleModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/file_bundle.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_bundle\" : { \"type\" : \"file_bundle\" , \"doc\" : \"The collection of files contained in the bundle.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.StoreFileBundleType","text":"Save a file bundle to disk.","title":"StoreFileBundleType"},{"location":"api_reference/kiara_modules.core.file_bundle/#kiara_modules.core.file_bundle.StoreFileBundleType.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/file_bundle.py def store_value ( self , value : Value , base_path : str ) -> typing . Tuple [ typing . Dict [ str , typing . Any ], typing . Any ]: bundle : KiaraFileBundle = value . get_value_data () rel_path = bundle . bundle_name target_path = os . path . join ( base_path , rel_path ) fb = bundle . copy_bundle ( target_path , is_onboarded = True ) # # the following changes the input value, which is usually not allowed, but the file_bundle type is a special case # bundle.included_files = fb.included_files # bundle.is_onboarded = True # bundle.path = fb.path # for path, f in bundle.included_files.items(): # f.is_onboarded = True load_config = { \"module_type\" : \"file_bundle.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"rel_path\" : rel_path }, \"output_name\" : \"file_bundle\" , } return ( load_config , fb )","title":"store_value()"},{"location":"api_reference/kiara_modules.core.generic/","text":"kiara_modules.core.generic \u00b6 JsonSerializationConfig pydantic-model \u00b6 file_name : str pydantic-field \u00b6 The name of the serialized file. options : int pydantic-field \u00b6 The options to use for the json serialization. Check https://github.com/ijl/orjson#quickstart for details. RestoreFromJsonDictModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"folder_path\" , \"doc\" : \"The folder that contains the serialized dict.\" , }, \"file_name\" : { \"type\" : \"string\" , \"doc\" : \"The file name of the serialized dict.\" , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : \"dict\" , \"doc\" : \"The deserialized dict value.\" }} RestoreScalarModule \u00b6 Utility module, only used internally. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"scalar_data\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : \"The scalar value.\" , } } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : \"The loaded item.\" , } } RestoreScalarModuleConfig pydantic-model \u00b6 value_type : str pydantic-field required \u00b6 The value type of the scalar to load. StoreScalarModule \u00b6 store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/generic.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: data = value . get_value_data () load_config = { \"module_type\" : \"generic.restore_scalar\" , \"module_config\" : { \"value_type\" : self . get_config_value ( \"value_type\" )}, \"base_path_input_name\" : None , \"inputs\" : { \"scalar_data\" : data }, \"output_name\" : \"value_item\" , } return load_config StoreScalarModuleConfig pydantic-model \u00b6 value_type : str pydantic-field required \u00b6 The value type of the scalar to store.","title":"\u279c\u2007generic"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modulescoregeneric","text":"","title":"kiara_modules.core.generic"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.JsonSerializationConfig","text":"","title":"JsonSerializationConfig"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.JsonSerializationConfig.file_name","text":"The name of the serialized file.","title":"file_name"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.JsonSerializationConfig.options","text":"The options to use for the json serialization. Check https://github.com/ijl/orjson#quickstart for details.","title":"options"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreFromJsonDictModule","text":"","title":"RestoreFromJsonDictModule"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreFromJsonDictModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"base_path\" : { \"type\" : \"folder_path\" , \"doc\" : \"The folder that contains the serialized dict.\" , }, \"file_name\" : { \"type\" : \"string\" , \"doc\" : \"The file name of the serialized dict.\" , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreFromJsonDictModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : \"dict\" , \"doc\" : \"The deserialized dict value.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreScalarModule","text":"Utility module, only used internally.","title":"RestoreScalarModule"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreScalarModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"scalar_data\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : \"The scalar value.\" , } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreScalarModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/generic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : \"The loaded item.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreScalarModuleConfig","text":"","title":"RestoreScalarModuleConfig"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.RestoreScalarModuleConfig.value_type","text":"The value type of the scalar to load.","title":"value_type"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.StoreScalarModule","text":"","title":"StoreScalarModule"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.StoreScalarModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/generic.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: data = value . get_value_data () load_config = { \"module_type\" : \"generic.restore_scalar\" , \"module_config\" : { \"value_type\" : self . get_config_value ( \"value_type\" )}, \"base_path_input_name\" : None , \"inputs\" : { \"scalar_data\" : data }, \"output_name\" : \"value_item\" , } return load_config","title":"store_value()"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.StoreScalarModuleConfig","text":"","title":"StoreScalarModuleConfig"},{"location":"api_reference/kiara_modules.core.generic/#kiara_modules.core.generic.StoreScalarModuleConfig.value_type","text":"The value type of the scalar to store.","title":"value_type"},{"location":"api_reference/kiara_modules.core.import/","text":"kiara_modules.core.import \u00b6","title":"\u279c\u2007import"},{"location":"api_reference/kiara_modules.core.import/#kiara_modulescoreimport","text":"","title":"kiara_modules.core.import"},{"location":"api_reference/kiara_modules.core.json/","text":"kiara_modules.core.json \u00b6 ToJsonModuleOld \u00b6 Convert arbitrary types into json. Very early days for this module, it doesn't support a lot of types yet.","title":"\u279c\u2007json"},{"location":"api_reference/kiara_modules.core.json/#kiara_modulescorejson","text":"","title":"kiara_modules.core.json"},{"location":"api_reference/kiara_modules.core.json/#kiara_modules.core.json.ToJsonModuleOld","text":"Convert arbitrary types into json. Very early days for this module, it doesn't support a lot of types yet.","title":"ToJsonModuleOld"},{"location":"api_reference/kiara_modules.core.list/","text":"kiara_modules.core.list \u00b6 IncludedInListCheckModule \u00b6 Check whether an element is in a list. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/list.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"list\" : { \"type\" : \"list\" , \"doc\" : \"The list.\" }, \"item\" : { \"type\" : \"any\" , \"doc\" : \"The element to check for inclusion in the list.\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/list.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"is_included\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether the element is in the list, or not.\" , } } return outputs StoreDictModule \u00b6 store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/list.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import orjson options = self . get_config_value ( \"options\" ) file_name = self . get_config_value ( \"file_name\" ) json_str = orjson . dumps ( value . get_value_data (), option = options ) bp = Path ( base_path ) bp . mkdir ( parents = True , exist_ok = True ) full_path = bp / file_name full_path . write_bytes ( json_str ) load_config = { \"module_type\" : \"generic.restore_from_json\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"file_name\" : self . get_config_value ( \"file_name\" ), }, \"output_name\" : \"value_item\" , } return load_config","title":"\u279c\u2007list"},{"location":"api_reference/kiara_modules.core.list/#kiara_modulescorelist","text":"","title":"kiara_modules.core.list"},{"location":"api_reference/kiara_modules.core.list/#kiara_modules.core.list.IncludedInListCheckModule","text":"Check whether an element is in a list.","title":"IncludedInListCheckModule"},{"location":"api_reference/kiara_modules.core.list/#kiara_modules.core.list.IncludedInListCheckModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/list.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"list\" : { \"type\" : \"list\" , \"doc\" : \"The list.\" }, \"item\" : { \"type\" : \"any\" , \"doc\" : \"The element to check for inclusion in the list.\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.list/#kiara_modules.core.list.IncludedInListCheckModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/list.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"is_included\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether the element is in the list, or not.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.list/#kiara_modules.core.list.StoreDictModule","text":"","title":"StoreDictModule"},{"location":"api_reference/kiara_modules.core.list/#kiara_modules.core.list.StoreDictModule.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/list.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import orjson options = self . get_config_value ( \"options\" ) file_name = self . get_config_value ( \"file_name\" ) json_str = orjson . dumps ( value . get_value_data (), option = options ) bp = Path ( base_path ) bp . mkdir ( parents = True , exist_ok = True ) full_path = bp / file_name full_path . write_bytes ( json_str ) load_config = { \"module_type\" : \"generic.restore_from_json\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : base_path , \"file_name\" : self . get_config_value ( \"file_name\" ), }, \"output_name\" : \"value_item\" , } return load_config","title":"store_value()"},{"location":"api_reference/kiara_modules.core.logic/","text":"kiara_modules.core.logic \u00b6 AndModule \u00b6 Returns 'True' if both inputs are 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } } LogicProcessingModuleConfig pydantic-model \u00b6 Config class for all the 'logic'-related modules. delay : float pydantic-field \u00b6 the delay in seconds from processing start to when the output is returned. NotModule \u00b6 Negates the input. create_input_schema ( self ) \u00b6 The not module only has one input, a boolean that will be negated by the module. Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" } } create_output_schema ( self ) \u00b6 The output of this module is a single boolean, the negated input. Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } } process ( self , inputs , outputs ) \u00b6 Negates the input boolean. Source code in core/logic.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . set_value ( \"y\" , not inputs . get_value_data ( \"a\" )) OrModule \u00b6 Returns 'True' if one of the inputs is 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"\u279c\u2007logic"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modulescorelogic","text":"","title":"kiara_modules.core.logic"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.AndModule","text":"Returns 'True' if both inputs are 'True'.","title":"AndModule"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.AndModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.AndModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.LogicProcessingModuleConfig","text":"Config class for all the 'logic'-related modules.","title":"LogicProcessingModuleConfig"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.LogicProcessingModuleConfig.delay","text":"the delay in seconds from processing start to when the output is returned.","title":"delay"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.NotModule","text":"Negates the input.","title":"NotModule"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.NotModule.create_input_schema","text":"The not module only has one input, a boolean that will be negated by the module. Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.NotModule.create_output_schema","text":"The output of this module is a single boolean, the negated input. Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.NotModule.process","text":"Negates the input boolean. Source code in core/logic.py def process ( self , inputs : ValueSet , outputs : ValueSet ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . set_value ( \"y\" , not inputs . get_value_data ( \"a\" ))","title":"process()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.OrModule","text":"Returns 'True' if one of the inputs is 'True'.","title":"OrModule"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.OrModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.logic/#kiara_modules.core.logic.OrModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/logic.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core/","text":"kiara_modules.core \u00b6 Top-level package for kiara_modules.core.","title":"kiara_modules.core"},{"location":"api_reference/kiara_modules.core/#kiara_modulescore","text":"Top-level package for kiara_modules.core.","title":"kiara_modules.core"},{"location":"api_reference/kiara_modules.core.metadata_schemas/","text":"kiara_modules.core.metadata_schemas \u00b6 This module contains the metadata models that are used in the kiara_modules.core package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel . ArrayMetadata pydantic-model \u00b6 Describes properties fo the 'array' type. length : int pydantic-field required \u00b6 The number of elements the array contains. size : int pydantic-field required \u00b6 Total number of bytes consumed by the elements of the array. ColumnSchema pydantic-model \u00b6 Describes properties of a single column of the 'table' data type. arrow_type_id : int pydantic-field required \u00b6 The arrow type id of the column. arrow_type_name : str pydantic-field required \u00b6 The arrow type name of the column. metadata : Dict [ str , Any ] pydantic-field \u00b6 Other metadata for the column. FolderImportConfig pydantic-model \u00b6 exclude_dirs : List [ str ] pydantic-field \u00b6 A list of strings, exclude all folders whose name ends with that string. exclude_files : List [ str ] pydantic-field \u00b6 A list of strings, exclude all files that match those (takes precedence over 'include_files'). Defaults to: ['.DS_Store']. include_files : List [ str ] pydantic-field \u00b6 A list of strings, include all files where the filename ends with that string. KiaraFile pydantic-model \u00b6 Describes properties for the 'file' value type. import_time : str pydantic-field required \u00b6 The time when the file was imported. is_onboarded : bool pydantic-field \u00b6 Whether the file is imported into the kiara data store. mime_type : str pydantic-field required \u00b6 The mime type of the file. orig_filename : str pydantic-field required \u00b6 The original filename of this file at the time of import. orig_path : str pydantic-field \u00b6 The original path to this file at the time of import. path : str pydantic-field required \u00b6 The archive path of the file. size : int pydantic-field required \u00b6 The size of the file. __repr__ ( self ) special \u00b6 Return repr(self). Source code in core/metadata_schemas.py def __repr__ ( self ): return f \"FileMetadata(name= { self . file_name } )\" __str__ ( self ) special \u00b6 Return str(self). Source code in core/metadata_schemas.py def __str__ ( self ): return self . __repr__ () load_file ( source , target = None , incl_orig_path = False ) classmethod \u00b6 Utility method to read metadata of a file from disk and optionally move it into a data archive location. Source code in core/metadata_schemas.py @classmethod def load_file ( cls , source : str , target : typing . Optional [ str ] = None , incl_orig_path : bool = False , ): \"\"\"Utility method to read metadata of a file from disk and optionally move it into a data archive location.\"\"\" import mimetypes import filetype if not source : raise ValueError ( \"No source path provided.\" ) if not os . path . exists ( os . path . realpath ( source )): raise ValueError ( f \"Path does not exist: { source } \" ) if not os . path . isfile ( os . path . realpath ( source )): raise ValueError ( f \"Path is not a file: { source } \" ) orig_filename = os . path . basename ( source ) orig_path : str = os . path . abspath ( source ) file_import_time = datetime . datetime . now () . isoformat () # TODO: timezone file_stats = os . stat ( orig_path ) size = file_stats . st_size if target : if os . path . exists ( target ): raise ValueError ( f \"Target path exists: { target } \" ) os . makedirs ( os . path . dirname ( target ), exist_ok = True ) shutil . copy2 ( source , target ) else : target = orig_path r = mimetypes . guess_type ( target ) if r [ 0 ] is not None : mime_type = r [ 0 ] else : _mime_type = filetype . guess ( target ) if not _mime_type : mime_type = \"application/octet-stream\" else : mime_type = _mime_type . MIME if not incl_orig_path : _orig_path : typing . Optional [ str ] = None else : _orig_path = orig_path m = KiaraFile ( orig_filename = orig_filename , orig_path = _orig_path , import_time = file_import_time , mime_type = mime_type , size = size , file_name = orig_filename , path = target , ) return m read_content ( self , as_str = True , max_lines =- 1 ) \u00b6 Read the content of a file. Source code in core/metadata_schemas.py def read_content ( self , as_str : bool = True , max_lines : int = - 1 ) -> typing . Union [ str , bytes ]: \"\"\"Read the content of a file.\"\"\" mode = \"r\" if as_str else \"rb\" with open ( self . path , mode ) as f : if not max_lines : content = f . read () else : content = \"\" . join (( next ( f ) for x in range ( max_lines ))) return content KiaraFileBundle pydantic-model \u00b6 Describes properties for the 'file_bundle' value type. bundle_name : str pydantic-field required \u00b6 The name of this bundle. import_time : str pydantic-field required \u00b6 The time when the file was imported. included_files : Dict [ str , kiara_modules . core . metadata_schemas . KiaraFile ] pydantic-field required \u00b6 A map of all the included files, incl. their properties. is_onboarded : bool pydantic-field \u00b6 Whether this bundle is imported into the kiara data store. number_of_files : int pydantic-field required \u00b6 How many files are included in this bundle. orig_bundle_name : str pydantic-field required \u00b6 The original name of this folder at the time of import. orig_path : str pydantic-field \u00b6 The original path to this folder at the time of import. path : str pydantic-field required \u00b6 The archive path of the folder. size : int pydantic-field required \u00b6 The size of all files in this folder, combined. __repr__ ( self ) special \u00b6 Return repr(self). Source code in core/metadata_schemas.py def __repr__ ( self ): return f \"FileBundle(name= { self . bundle_name } )\" __str__ ( self ) special \u00b6 Return str(self). Source code in core/metadata_schemas.py def __str__ ( self ): return self . __repr__ () TableMetadata pydantic-model \u00b6 Describes properties for the 'table' data type. column_names : List [ str ] pydantic-field required \u00b6 The name of the columns of the table. column_schema : Dict [ str , kiara_modules . core . metadata_schemas . ColumnSchema ] pydantic-field required \u00b6 The schema description of the table. rows : int pydantic-field required \u00b6 The number of rows the table contains. size : int pydantic-field required \u00b6 The tables size in bytes.","title":"\u279c\u2007metadata_schemas"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modulescoremetadata_schemas","text":"This module contains the metadata models that are used in the kiara_modules.core package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"kiara_modules.core.metadata_schemas"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ArrayMetadata","text":"Describes properties fo the 'array' type.","title":"ArrayMetadata"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ArrayMetadata.length","text":"The number of elements the array contains.","title":"length"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ArrayMetadata.size","text":"Total number of bytes consumed by the elements of the array.","title":"size"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ColumnSchema","text":"Describes properties of a single column of the 'table' data type.","title":"ColumnSchema"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ColumnSchema.arrow_type_id","text":"The arrow type id of the column.","title":"arrow_type_id"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ColumnSchema.arrow_type_name","text":"The arrow type name of the column.","title":"arrow_type_name"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.ColumnSchema.metadata","text":"Other metadata for the column.","title":"metadata"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.FolderImportConfig","text":"","title":"FolderImportConfig"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.FolderImportConfig.exclude_dirs","text":"A list of strings, exclude all folders whose name ends with that string.","title":"exclude_dirs"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.FolderImportConfig.exclude_files","text":"A list of strings, exclude all files that match those (takes precedence over 'include_files'). Defaults to: ['.DS_Store'].","title":"exclude_files"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.FolderImportConfig.include_files","text":"A list of strings, include all files where the filename ends with that string.","title":"include_files"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile","text":"Describes properties for the 'file' value type.","title":"KiaraFile"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.import_time","text":"The time when the file was imported.","title":"import_time"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.is_onboarded","text":"Whether the file is imported into the kiara data store.","title":"is_onboarded"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.mime_type","text":"The mime type of the file.","title":"mime_type"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.orig_filename","text":"The original filename of this file at the time of import.","title":"orig_filename"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.orig_path","text":"The original path to this file at the time of import.","title":"orig_path"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.path","text":"The archive path of the file.","title":"path"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.size","text":"The size of the file.","title":"size"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.__repr__","text":"Return repr(self). Source code in core/metadata_schemas.py def __repr__ ( self ): return f \"FileMetadata(name= { self . file_name } )\"","title":"__repr__()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.__str__","text":"Return str(self). Source code in core/metadata_schemas.py def __str__ ( self ): return self . __repr__ ()","title":"__str__()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.load_file","text":"Utility method to read metadata of a file from disk and optionally move it into a data archive location. Source code in core/metadata_schemas.py @classmethod def load_file ( cls , source : str , target : typing . Optional [ str ] = None , incl_orig_path : bool = False , ): \"\"\"Utility method to read metadata of a file from disk and optionally move it into a data archive location.\"\"\" import mimetypes import filetype if not source : raise ValueError ( \"No source path provided.\" ) if not os . path . exists ( os . path . realpath ( source )): raise ValueError ( f \"Path does not exist: { source } \" ) if not os . path . isfile ( os . path . realpath ( source )): raise ValueError ( f \"Path is not a file: { source } \" ) orig_filename = os . path . basename ( source ) orig_path : str = os . path . abspath ( source ) file_import_time = datetime . datetime . now () . isoformat () # TODO: timezone file_stats = os . stat ( orig_path ) size = file_stats . st_size if target : if os . path . exists ( target ): raise ValueError ( f \"Target path exists: { target } \" ) os . makedirs ( os . path . dirname ( target ), exist_ok = True ) shutil . copy2 ( source , target ) else : target = orig_path r = mimetypes . guess_type ( target ) if r [ 0 ] is not None : mime_type = r [ 0 ] else : _mime_type = filetype . guess ( target ) if not _mime_type : mime_type = \"application/octet-stream\" else : mime_type = _mime_type . MIME if not incl_orig_path : _orig_path : typing . Optional [ str ] = None else : _orig_path = orig_path m = KiaraFile ( orig_filename = orig_filename , orig_path = _orig_path , import_time = file_import_time , mime_type = mime_type , size = size , file_name = orig_filename , path = target , ) return m","title":"load_file()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFile.read_content","text":"Read the content of a file. Source code in core/metadata_schemas.py def read_content ( self , as_str : bool = True , max_lines : int = - 1 ) -> typing . Union [ str , bytes ]: \"\"\"Read the content of a file.\"\"\" mode = \"r\" if as_str else \"rb\" with open ( self . path , mode ) as f : if not max_lines : content = f . read () else : content = \"\" . join (( next ( f ) for x in range ( max_lines ))) return content","title":"read_content()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle","text":"Describes properties for the 'file_bundle' value type.","title":"KiaraFileBundle"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.bundle_name","text":"The name of this bundle.","title":"bundle_name"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.import_time","text":"The time when the file was imported.","title":"import_time"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.included_files","text":"A map of all the included files, incl. their properties.","title":"included_files"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.is_onboarded","text":"Whether this bundle is imported into the kiara data store.","title":"is_onboarded"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.number_of_files","text":"How many files are included in this bundle.","title":"number_of_files"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.orig_bundle_name","text":"The original name of this folder at the time of import.","title":"orig_bundle_name"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.orig_path","text":"The original path to this folder at the time of import.","title":"orig_path"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.path","text":"The archive path of the folder.","title":"path"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.size","text":"The size of all files in this folder, combined.","title":"size"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.__repr__","text":"Return repr(self). Source code in core/metadata_schemas.py def __repr__ ( self ): return f \"FileBundle(name= { self . bundle_name } )\"","title":"__repr__()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.KiaraFileBundle.__str__","text":"Return str(self). Source code in core/metadata_schemas.py def __str__ ( self ): return self . __repr__ ()","title":"__str__()"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.TableMetadata","text":"Describes properties for the 'table' data type.","title":"TableMetadata"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.TableMetadata.column_names","text":"The name of the columns of the table.","title":"column_names"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.TableMetadata.column_schema","text":"The schema description of the table.","title":"column_schema"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.TableMetadata.rows","text":"The number of rows the table contains.","title":"rows"},{"location":"api_reference/kiara_modules.core.metadata_schemas/#kiara_modules.core.metadata_schemas.TableMetadata.size","text":"The tables size in bytes.","title":"size"},{"location":"api_reference/kiara_modules.core.operations/","text":"kiara_modules.core.operations \u00b6","title":"\u279c\u2007operations"},{"location":"api_reference/kiara_modules.core.operations/#kiara_modulescoreoperations","text":"","title":"kiara_modules.core.operations"},{"location":"api_reference/kiara_modules.core.pipelines/","text":"kiara_modules.core.pipelines \u00b6 Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"\u279c\u2007pipelines"},{"location":"api_reference/kiara_modules.core.pipelines/#kiara_modulescorepipelines","text":"Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"kiara_modules.core.pipelines"},{"location":"api_reference/kiara_modules.core.python/","text":"kiara_modules.core.python \u00b6","title":"\u279c\u2007python"},{"location":"api_reference/kiara_modules.core.python/#kiara_modulescorepython","text":"","title":"kiara_modules.core.python"},{"location":"api_reference/kiara_modules.core.string/","text":"kiara_modules.core.string \u00b6 DeserializeStringModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"serialized\" : { \"type\" : \"string\" , \"doc\" : \"The serialized form of the string.\" , } } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : \"string\" , \"doc\" : \"The string data.\" }} DeserializeStringModuleConfig pydantic-model \u00b6 serialization_type : str pydantic-field required \u00b6 The serialization type that was used to serialize the value. MagicModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"description\" : { \"type\" : \"string\" , \"doc\" : \"The description of the value, and where it comes from.\" , \"default\" : DEFAULT_NO_DESC_VALUE , } } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . get_config_value ( \"target_type\" )}} MagicModuleConfig pydantic-model \u00b6 source_id : str pydantic-field required \u00b6 The id of the source value. target_type : str pydantic-field required \u00b6 The target type. RegexModule \u00b6 Match a string using a regular expression. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to match.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: if self . get_config_value ( \"only_first_match\" ): output_schema = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The first match.\" }} else : raise NotImplementedError () return output_schema RegexModuleConfig pydantic-model \u00b6 only_first_match : bool pydantic-field \u00b6 Whether to only return the first match, or all matches. regex : str pydantic-field required \u00b6 The regex to apply. ReplaceModuleConfig pydantic-model \u00b6 default_value : str pydantic-field \u00b6 The default value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself. replacement_map : Dict [ str , str ] pydantic-field required \u00b6 A map, containing the strings to be replaced as keys, and the replacements as values. ReplaceStringModule \u00b6 Replace a string if it matches a key in a mapping dictionary. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The replaced string.\" }} StringManipulationModule \u00b6 Base module to simplify creating other modules that do string manipulation. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The processed string.\" }}","title":"\u279c\u2007string"},{"location":"api_reference/kiara_modules.core.string/#kiara_modulescorestring","text":"","title":"kiara_modules.core.string"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.DeserializeStringModule","text":"","title":"DeserializeStringModule"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.DeserializeStringModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"serialized\" : { \"type\" : \"string\" , \"doc\" : \"The serialized form of the string.\" , } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.DeserializeStringModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : \"string\" , \"doc\" : \"The string data.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.DeserializeStringModuleConfig","text":"","title":"DeserializeStringModuleConfig"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.DeserializeStringModuleConfig.serialization_type","text":"The serialization type that was used to serialize the value.","title":"serialization_type"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModule","text":"","title":"MagicModule"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"description\" : { \"type\" : \"string\" , \"doc\" : \"The description of the value, and where it comes from.\" , \"default\" : DEFAULT_NO_DESC_VALUE , } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"value_item\" : { \"type\" : self . get_config_value ( \"target_type\" )}}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModuleConfig","text":"","title":"MagicModuleConfig"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModuleConfig.source_id","text":"The id of the source value.","title":"source_id"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.MagicModuleConfig.target_type","text":"The target type.","title":"target_type"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModule","text":"Match a string using a regular expression.","title":"RegexModule"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to match.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: if self . get_config_value ( \"only_first_match\" ): output_schema = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The first match.\" }} else : raise NotImplementedError () return output_schema","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModuleConfig","text":"","title":"RegexModuleConfig"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModuleConfig.only_first_match","text":"Whether to only return the first match, or all matches.","title":"only_first_match"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.RegexModuleConfig.regex","text":"The regex to apply.","title":"regex"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceModuleConfig","text":"","title":"ReplaceModuleConfig"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceModuleConfig.default_value","text":"The default value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself.","title":"default_value"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceModuleConfig.replacement_map","text":"A map, containing the strings to be replaced as keys, and the replacements as values.","title":"replacement_map"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceStringModule","text":"Replace a string if it matches a key in a mapping dictionary.","title":"ReplaceStringModule"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceStringModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.ReplaceStringModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The replaced string.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.StringManipulationModule","text":"Base module to simplify creating other modules that do string manipulation.","title":"StringManipulationModule"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.StringManipulationModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The input string.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.string/#kiara_modules.core.string.StringManipulationModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/string.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The processed string.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table.filter/","text":"kiara_modules.core.table.filter \u00b6 CreateFilteredTableModule \u00b6 Filter a table using a mask array. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/filter.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to filter.\" }, \"mask\" : { \"type\" : \"array\" , \"doc\" : \"An mask array of booleans of the same length as the table.\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/filter.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The filtered table.\" }} return outputs","title":"\u279c\u2007table.filter"},{"location":"api_reference/kiara_modules.core.table.filter/#kiara_modulescoretablefilter","text":"","title":"kiara_modules.core.table.filter"},{"location":"api_reference/kiara_modules.core.table.filter/#kiara_modules.core.table.filter.CreateFilteredTableModule","text":"Filter a table using a mask array.","title":"CreateFilteredTableModule"},{"location":"api_reference/kiara_modules.core.table.filter/#kiara_modules.core.table.filter.CreateFilteredTableModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/filter.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to filter.\" }, \"mask\" : { \"type\" : \"array\" , \"doc\" : \"An mask array of booleans of the same length as the table.\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table.filter/#kiara_modules.core.table.filter.CreateFilteredTableModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/filter.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The filtered table.\" }} return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/","text":"kiara_modules.core.table \u00b6 ConvertToTableModule \u00b6 Convert an Arrow table. This module supportes two conversion targets currently: bytes: a memoryview of the byte-representation of the Table string: the base64-encoded byte-representation of the Table CutColumnModule \u00b6 Cut off one column from a table, returning an array. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"A table.\" }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column to extract.\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The column.\" } } return outputs ExportArrowTable \u00b6 Export a table object to disk. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table object.\" }, \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the file to write.\" , }, \"format\" : { \"type\" : \"string\" , \"doc\" : \"The format of the table file ('feather' or 'parquet').\" , \"default\" : \"feather\" , }, \"force_overwrite\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to overwrite an existing file.\" , \"default\" : False , }, \"compression\" : { \"type\" : \"string\" , \"doc\" : \"The compression to use. Use either: 'zstd' (default), 'lz4', or 'uncompressed'.\" , \"default\" : \"zstd\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"load_config\" : { \"type\" : \"load_config\" , \"doc\" : \"The configuration to use with kiara to load the saved value.\" , } } return outputs LoadArrowTable \u00b6 Load a table object from disk. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the folder that contains the table file.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path to the table file within base_path.\" , }, \"format\" : { \"type\" : \"string\" , \"doc\" : \"The format of the table file ('feather' or 'parquet').\" , \"default\" : \"feather\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The pyarrow table object.\" } } return outputs MapColumnModule \u00b6 Map the items of one column of a table onto an array, using another module. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to use as input.\" , }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the table column to run the mapping operation on.\" , }, } for input_name , schema in self . child_module . input_schemas . items (): assert input_name != \"table\" assert input_name != \"column_name\" if input_name == self . module_input_name : continue inputs [ input_name ] = schema return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"An array of equal length to the input array, containing the 'mapped' values.\" , } } return outputs module_instance_doc ( self ) \u00b6 Return documentation for this instance of the module. If not overwritten, will return this class' method doc() . Source code in core/table/__init__.py def module_instance_doc ( self ) -> str : config : MapColumnsModuleConfig = self . config # type: ignore module_type = config . module_type module_config = config . module_config m = self . _kiara . create_module ( id = \"map_column_child\" , module_type = module_type , module_config = module_config ) type_md = m . get_type_metadata () doc = type_md . documentation . full_doc link = type_md . context . get_url_for_reference ( \"module_doc\" ) if not link : link_str = f \"`` { module_type } ``\" else : link_str = f \"[`` { module_type } ``]( { link } )\" result = f \"\"\"Map the values of the rows of an input table onto a new array of the same length, using the { link_str } module.\"\"\" if doc and doc != \"-- n/a --\" : result = result + f \" \\n\\n `` { module_type } `` documentation: \\n\\n { doc } \" return result MapColumnsModuleConfig pydantic-model \u00b6 input_name : str pydantic-field \u00b6 The name of the input name of the module which will receive the rows from our input table. Can be omitted if the configured module only has a single input. module_config : Dict [ str , Any ] pydantic-field \u00b6 The config for the kiara filter module. module_type : str pydantic-field required \u00b6 The name of the kiara module to use to filter the input data. output_name : str pydantic-field \u00b6 The name of the output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output. MergeTableModule \u00b6 Create a table from other tables and/or arrays. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: input_schema_dict = self . get_config_value ( \"input_schema\" ) return input_schema_dict create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The merged table, including all source tables and columns.\" , } } return outputs MergeTableModuleConfig pydantic-model \u00b6 input_schema : Dict [ str , Any ] pydantic-field required \u00b6 A dict describing the inputs for this merge process. SampleTableModule \u00b6 Sample a table. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run. get_value_type () classmethod \u00b6 Return the value type for this sample module. Source code in core/table/__init__.py @classmethod def get_value_type ( cls ) -> str : return \"table\" SaveArrowTableConfig pydantic-model \u00b6 compression : str pydantic-field \u00b6 The compression to use when saving the table. StoreArrowTable \u00b6 store_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in core/table/__init__.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import pyarrow as pa from pyarrow import feather table : pa . Table = value . get_value_data () full_path : str = os . path . join ( base_path , DEFAULT_SAVE_TABLE_FILE_NAME ) if os . path . exists ( full_path ): raise KiaraProcessingException ( f \"Can't save table, file already exists: { full_path } \" ) os . makedirs ( os . path . dirname ( full_path ), exist_ok = True ) compression = self . get_config_value ( \"compression\" ) feather . write_feather ( table , full_path , compression = compression ) result = { \"module_type\" : \"table.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : os . path . dirname ( full_path ), \"rel_path\" : os . path . basename ( full_path ), \"format\" : \"feather\" , }, \"output_name\" : \"table\" , } return result TableConversionModuleConfig pydantic-model \u00b6 ignore_errors : bool pydantic-field \u00b6 Whether to ignore convert errors and omit the failed items. TableMetadataModule \u00b6 Extract metadata from a table object.","title":"\u279c\u2007table"},{"location":"api_reference/kiara_modules.core.table/#kiara_modulescoretable","text":"","title":"kiara_modules.core.table"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.ConvertToTableModule","text":"Convert an Arrow table. This module supportes two conversion targets currently: bytes: a memoryview of the byte-representation of the Table string: the base64-encoded byte-representation of the Table","title":"ConvertToTableModule"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.CutColumnModule","text":"Cut off one column from a table, returning an array.","title":"CutColumnModule"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.CutColumnModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"A table.\" }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column to extract.\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.CutColumnModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The column.\" } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.ExportArrowTable","text":"Export a table object to disk.","title":"ExportArrowTable"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.ExportArrowTable.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table object.\" }, \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the file to write.\" , }, \"format\" : { \"type\" : \"string\" , \"doc\" : \"The format of the table file ('feather' or 'parquet').\" , \"default\" : \"feather\" , }, \"force_overwrite\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to overwrite an existing file.\" , \"default\" : False , }, \"compression\" : { \"type\" : \"string\" , \"doc\" : \"The compression to use. Use either: 'zstd' (default), 'lz4', or 'uncompressed'.\" , \"default\" : \"zstd\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.ExportArrowTable.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"load_config\" : { \"type\" : \"load_config\" , \"doc\" : \"The configuration to use with kiara to load the saved value.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.LoadArrowTable","text":"Load a table object from disk.","title":"LoadArrowTable"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.LoadArrowTable.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"base_path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the folder that contains the table file.\" , }, \"rel_path\" : { \"type\" : \"string\" , \"doc\" : \"The relative path to the table file within base_path.\" , }, \"format\" : { \"type\" : \"string\" , \"doc\" : \"The format of the table file ('feather' or 'parquet').\" , \"default\" : \"feather\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.LoadArrowTable.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The pyarrow table object.\" } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnModule","text":"Map the items of one column of a table onto an array, using another module.","title":"MapColumnModule"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Dict [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to use as input.\" , }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the table column to run the mapping operation on.\" , }, } for input_name , schema in self . child_module . input_schemas . items (): assert input_name != \"table\" assert input_name != \"column_name\" if input_name == self . module_input_name : continue inputs [ input_name ] = schema return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"array\" : { \"type\" : \"array\" , \"doc\" : \"An array of equal length to the input array, containing the 'mapped' values.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnModule.module_instance_doc","text":"Return documentation for this instance of the module. If not overwritten, will return this class' method doc() . Source code in core/table/__init__.py def module_instance_doc ( self ) -> str : config : MapColumnsModuleConfig = self . config # type: ignore module_type = config . module_type module_config = config . module_config m = self . _kiara . create_module ( id = \"map_column_child\" , module_type = module_type , module_config = module_config ) type_md = m . get_type_metadata () doc = type_md . documentation . full_doc link = type_md . context . get_url_for_reference ( \"module_doc\" ) if not link : link_str = f \"`` { module_type } ``\" else : link_str = f \"[`` { module_type } ``]( { link } )\" result = f \"\"\"Map the values of the rows of an input table onto a new array of the same length, using the { link_str } module.\"\"\" if doc and doc != \"-- n/a --\" : result = result + f \" \\n\\n `` { module_type } `` documentation: \\n\\n { doc } \" return result","title":"module_instance_doc()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnsModuleConfig","text":"","title":"MapColumnsModuleConfig"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnsModuleConfig.input_name","text":"The name of the input name of the module which will receive the rows from our input table. Can be omitted if the configured module only has a single input.","title":"input_name"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnsModuleConfig.module_config","text":"The config for the kiara filter module.","title":"module_config"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnsModuleConfig.module_type","text":"The name of the kiara module to use to filter the input data.","title":"module_type"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MapColumnsModuleConfig.output_name","text":"The name of the output name of the module which will receive the items from our input array. Can be omitted if the configured module only has a single output.","title":"output_name"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MergeTableModule","text":"Create a table from other tables and/or arrays.","title":"MergeTableModule"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MergeTableModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: input_schema_dict = self . get_config_value ( \"input_schema\" ) return input_schema_dict","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MergeTableModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The merged table, including all source tables and columns.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MergeTableModuleConfig","text":"","title":"MergeTableModuleConfig"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.MergeTableModuleConfig.input_schema","text":"A dict describing the inputs for this merge process.","title":"input_schema"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.SampleTableModule","text":"Sample a table. Samples are used to randomly select a subset of a dataset, which helps test queries and workflows on smaller versions of the original data, to adjust parameters before a full run.","title":"SampleTableModule"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.SampleTableModule.get_value_type","text":"Return the value type for this sample module. Source code in core/table/__init__.py @classmethod def get_value_type ( cls ) -> str : return \"table\"","title":"get_value_type()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.SaveArrowTableConfig","text":"","title":"SaveArrowTableConfig"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.SaveArrowTableConfig.compression","text":"The compression to use when saving the table.","title":"compression"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.StoreArrowTable","text":"","title":"StoreArrowTable"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.StoreArrowTable.store_value","text":"Save the value, and return the load config needed to load it again. Source code in core/table/__init__.py def store_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import pyarrow as pa from pyarrow import feather table : pa . Table = value . get_value_data () full_path : str = os . path . join ( base_path , DEFAULT_SAVE_TABLE_FILE_NAME ) if os . path . exists ( full_path ): raise KiaraProcessingException ( f \"Can't save table, file already exists: { full_path } \" ) os . makedirs ( os . path . dirname ( full_path ), exist_ok = True ) compression = self . get_config_value ( \"compression\" ) feather . write_feather ( table , full_path , compression = compression ) result = { \"module_type\" : \"table.load\" , \"base_path_input_name\" : \"base_path\" , \"inputs\" : { \"base_path\" : os . path . dirname ( full_path ), \"rel_path\" : os . path . basename ( full_path ), \"format\" : \"feather\" , }, \"output_name\" : \"table\" , } return result","title":"store_value()"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.TableConversionModuleConfig","text":"","title":"TableConversionModuleConfig"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.TableConversionModuleConfig.ignore_errors","text":"Whether to ignore convert errors and omit the failed items.","title":"ignore_errors"},{"location":"api_reference/kiara_modules.core.table/#kiara_modules.core.table.__init__.TableMetadataModule","text":"Extract metadata from a table object.","title":"TableMetadataModule"},{"location":"api_reference/kiara_modules.core.table.query/","text":"kiara_modules.core.table.query \u00b6 QueryTableGraphQL \u00b6 Execute a graphql aggregation query against an (Arrow) table. References https://vaex.io/docs/example_graphql.html Examples: An example for a query could be: { df(where: { Language: {_eq: \"German\"} } ) { row(limit: 10) { Label City } } } create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to query.\" }, \"query\" : { \"type\" : \"string\" , \"doc\" : \"The query.\" }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"query_result\" : { \"type\" : \"dict\" , \"doc\" : \"The query result.\" } } return outputs QueryTableSQL \u00b6 Execute a sql query against an (Arrow) table. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to query\" , } } if self . get_config_value ( \"query\" ) is None : inputs [ \"query\" ] = { \"type\" : \"string\" , \"doc\" : \"The query.\" } inputs [ \"relation_name\" ] = { \"type\" : \"string\" , \"doc\" : \"The name the table is referred to in the sql query.\" , \"default\" : \"data\" , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"query_result\" : { \"type\" : \"table\" , \"doc\" : \"The query result.\" }} QueryTableSQLModuleConfig pydantic-model \u00b6 query : str pydantic-field \u00b6 The query to execute. If not specified, the user will be able to provide their own. relation_name : str pydantic-field \u00b6 The name the table is referred to in the sql query. If not specified, the user will be able to provide their own.","title":"\u279c\u2007table.query"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modulescoretablequery","text":"","title":"kiara_modules.core.table.query"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableGraphQL","text":"Execute a graphql aggregation query against an (Arrow) table. References https://vaex.io/docs/example_graphql.html Examples: An example for a query could be: { df(where: { Language: {_eq: \"German\"} } ) { row(limit: 10) { Label City } } }","title":"QueryTableGraphQL"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableGraphQL.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to query.\" }, \"query\" : { \"type\" : \"string\" , \"doc\" : \"The query.\" }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableGraphQL.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"query_result\" : { \"type\" : \"dict\" , \"doc\" : \"The query result.\" } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQL","text":"Execute a sql query against an (Arrow) table.","title":"QueryTableSQL"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQL.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table to query\" , } } if self . get_config_value ( \"query\" ) is None : inputs [ \"query\" ] = { \"type\" : \"string\" , \"doc\" : \"The query.\" } inputs [ \"relation_name\" ] = { \"type\" : \"string\" , \"doc\" : \"The name the table is referred to in the sql query.\" , \"default\" : \"data\" , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQL.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/table/query.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"query_result\" : { \"type\" : \"table\" , \"doc\" : \"The query result.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQLModuleConfig","text":"","title":"QueryTableSQLModuleConfig"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQLModuleConfig.query","text":"The query to execute. If not specified, the user will be able to provide their own.","title":"query"},{"location":"api_reference/kiara_modules.core.table.query/#kiara_modules.core.table.query.QueryTableSQLModuleConfig.relation_name","text":"The name the table is referred to in the sql query. If not specified, the user will be able to provide their own.","title":"relation_name"},{"location":"api_reference/kiara_modules.core.value/","text":"kiara_modules.core.value \u00b6 DataProfilerModule \u00b6 Generate a data profile report for a dataset. This uses the DataProfiler Python library, check out its documentation for more details. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/value.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Mapping [ str , typing . Any ]] = { \"item\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : f \"The { self . get_config_value ( 'value_type' ) } to profile.\" , } } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/value.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Mapping [ str , typing . Any ]] = { \"report\" : { \"type\" : \"dict\" , \"doc\" : \"Statistics/details about the dataset.\" } } return outputs retrieve_module_profiles ( kiara ) classmethod \u00b6 Retrieve a collection of profiles (pre-set module configs) for this kiara module type. This is used to automatically create generally useful operations (incl. their ids). Source code in core/value.py @classmethod def retrieve_module_profiles ( cls , kiara : \"Kiara\" ) -> typing . Mapping [ str , typing . Union [ typing . Mapping [ str , typing . Any ], Operation ]]: supported_source_types = [ \"table\" , \"file\" ] doc = cls . get_type_metadata () . documentation all_profiles = {} for sup_type in supported_source_types : op_config = { \"module_type\" : cls . _module_type_id , # type: ignore \"module_config\" : { \"value_type\" : sup_type }, \"doc\" : doc , } all_profiles [ f \"profile. { sup_type } .data\" ] = op_config return all_profiles DataProfilerModuleConfig pydantic-model \u00b6 value_type : str pydantic-field required \u00b6 The value type to profile.","title":"\u279c\u2007value"},{"location":"api_reference/kiara_modules.core.value/#kiara_modulescorevalue","text":"","title":"kiara_modules.core.value"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModule","text":"Generate a data profile report for a dataset. This uses the DataProfiler Python library, check out its documentation for more details.","title":"DataProfilerModule"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this input]\", \"optional*': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in core/value.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Mapping [ str , typing . Any ]] = { \"item\" : { \"type\" : self . get_config_value ( \"value_type\" ), \"doc\" : f \"The { self . get_config_value ( 'value_type' ) } to profile.\" , } } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in core/value.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Mapping [ str , typing . Any ]] = { \"report\" : { \"type\" : \"dict\" , \"doc\" : \"Statistics/details about the dataset.\" } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModule.retrieve_module_profiles","text":"Retrieve a collection of profiles (pre-set module configs) for this kiara module type. This is used to automatically create generally useful operations (incl. their ids). Source code in core/value.py @classmethod def retrieve_module_profiles ( cls , kiara : \"Kiara\" ) -> typing . Mapping [ str , typing . Union [ typing . Mapping [ str , typing . Any ], Operation ]]: supported_source_types = [ \"table\" , \"file\" ] doc = cls . get_type_metadata () . documentation all_profiles = {} for sup_type in supported_source_types : op_config = { \"module_type\" : cls . _module_type_id , # type: ignore \"module_config\" : { \"value_type\" : sup_type }, \"doc\" : doc , } all_profiles [ f \"profile. { sup_type } .data\" ] = op_config return all_profiles","title":"retrieve_module_profiles()"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModuleConfig","text":"","title":"DataProfilerModuleConfig"},{"location":"api_reference/kiara_modules.core.value/#kiara_modules.core.value.DataProfilerModuleConfig.value_type","text":"The value type to profile.","title":"value_type"},{"location":"api_reference/kiara_modules.core.value_types/","text":"kiara_modules.core.value_types \u00b6 This module contains the value type classes that are used in the kiara_modules.core package. ArrayType \u00b6 An Apache arrow array. BooleanType \u00b6 A boolean. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value )) BytesType \u00b6 An array of bytes. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value )) DateType \u00b6 A date. Internally, this will always be represented as a Python datetime object. Iff provided as input, it can also be as string, in which case the dateutils.parser.parse method will be used to parse the string into a datetime object. calculate_value_hash ( value , hash_typpe ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_typpe : str ) -> str : return str ( hash ( value )) parse_value ( self , v ) \u00b6 Parse a value into a supported python type. This exists to make it easier to do trivial conversions (e.g. from a date string to a datetime object). If you choose to overwrite this method, make 100% sure that you don't change the meaning of the value, and try to avoid adding or removing information from the data (e.g. by changing the resolution of a date). Parameters: Name Type Description Default v Any the value required Returns: Type Description Any 'None', if no parsing was done and the original value should be used, otherwise return the parsed Python object Source code in core/value_types.py def parse_value ( self , v : typing . Any ) -> typing . Any : from dateutil import parser if isinstance ( v , str ): d = parser . parse ( v ) return d elif isinstance ( v , datetime . date ): _d = datetime . datetime ( year = v . year , month = v . month , day = v . day ) return _d return None DictType \u00b6 A dict-like object. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : from deepdiff import DeepHash dh = DeepHash ( value ) return str ( dh [ value ]) FileBundleType \u00b6 A representation of a set of files (folder, archive, etc.). It is recommended to 'onboard' files before working with them, otherwise metadata consistency can not be guaranteed. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : assert hash_type == \"sha3_256\" assert isinstance ( value , KiaraFileBundle ) return value . file_bundle_hash FileType \u00b6 A representation of a file. It is recommended to 'onboard' files before working with them, otherwise metadata consistency can not be guaranteed. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : assert hash_type == \"sha3_256\" assert isinstance ( value , KiaraFile ) return value . file_hash FloatType \u00b6 A float. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value )) IntegerType \u00b6 An integer. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value )) ListType \u00b6 A list-like object. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( self , value : typing . Any , hash_type : str ) -> str : from deepdiff import DeepHash dh = DeepHash ( value ) return str ( dh [ value ]) RenderablesType \u00b6 A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter. Internally, the result list items can be either a string, a 'rich.console.ConsoleRenderable', or a 'rich.console.RichCast'. StringType \u00b6 A string. calculate_value_hash ( value , hash_type ) classmethod \u00b6 Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value )) TableType \u00b6 A table. Internally, this is backed by the Apache Arrow Table class. check_data ( data ) classmethod \u00b6 Check whether the provided input matches this value type. If it does, return a ValueType object (with the appropriate type configuration). Source code in core/value_types.py @classmethod def check_data ( cls , data : typing . Any ) -> typing . Optional [ \"ValueType\" ]: import pyarrow as pa if isinstance ( data , pa . Table ): return TableType () return None","title":"\u279c\u2007value_types"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modulescorevalue_types","text":"This module contains the value type classes that are used in the kiara_modules.core package.","title":"kiara_modules.core.value_types"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.ArrayType","text":"An Apache arrow array.","title":"ArrayType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.BooleanType","text":"A boolean.","title":"BooleanType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.BooleanType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.BytesType","text":"An array of bytes.","title":"BytesType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.BytesType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.DateType","text":"A date. Internally, this will always be represented as a Python datetime object. Iff provided as input, it can also be as string, in which case the dateutils.parser.parse method will be used to parse the string into a datetime object.","title":"DateType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.DateType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_typpe : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.DateType.parse_value","text":"Parse a value into a supported python type. This exists to make it easier to do trivial conversions (e.g. from a date string to a datetime object). If you choose to overwrite this method, make 100% sure that you don't change the meaning of the value, and try to avoid adding or removing information from the data (e.g. by changing the resolution of a date). Parameters: Name Type Description Default v Any the value required Returns: Type Description Any 'None', if no parsing was done and the original value should be used, otherwise return the parsed Python object Source code in core/value_types.py def parse_value ( self , v : typing . Any ) -> typing . Any : from dateutil import parser if isinstance ( v , str ): d = parser . parse ( v ) return d elif isinstance ( v , datetime . date ): _d = datetime . datetime ( year = v . year , month = v . month , day = v . day ) return _d return None","title":"parse_value()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.DictType","text":"A dict-like object.","title":"DictType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.DictType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : from deepdiff import DeepHash dh = DeepHash ( value ) return str ( dh [ value ])","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FileBundleType","text":"A representation of a set of files (folder, archive, etc.). It is recommended to 'onboard' files before working with them, otherwise metadata consistency can not be guaranteed.","title":"FileBundleType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FileBundleType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : assert hash_type == \"sha3_256\" assert isinstance ( value , KiaraFileBundle ) return value . file_bundle_hash","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FileType","text":"A representation of a file. It is recommended to 'onboard' files before working with them, otherwise metadata consistency can not be guaranteed.","title":"FileType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FileType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : assert hash_type == \"sha3_256\" assert isinstance ( value , KiaraFile ) return value . file_hash","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FloatType","text":"A float.","title":"FloatType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.FloatType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.IntegerType","text":"An integer.","title":"IntegerType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.IntegerType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.ListType","text":"A list-like object.","title":"ListType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.ListType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( self , value : typing . Any , hash_type : str ) -> str : from deepdiff import DeepHash dh = DeepHash ( value ) return str ( dh [ value ])","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.RenderablesType","text":"A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter. Internally, the result list items can be either a string, a 'rich.console.ConsoleRenderable', or a 'rich.console.RichCast'.","title":"RenderablesType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.StringType","text":"A string.","title":"StringType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.StringType.calculate_value_hash","text":"Calculate the hash of this value. If a hash can't be calculated, or the calculation of a type is not implemented (yet), this will return None. Source code in core/value_types.py @classmethod def calculate_value_hash ( cls , value : typing . Any , hash_type : str ) -> str : return str ( hash ( value ))","title":"calculate_value_hash()"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.TableType","text":"A table. Internally, this is backed by the Apache Arrow Table class.","title":"TableType"},{"location":"api_reference/kiara_modules.core.value_types/#kiara_modules.core.value_types.TableType.check_data","text":"Check whether the provided input matches this value type. If it does, return a ValueType object (with the appropriate type configuration). Source code in core/value_types.py @classmethod def check_data ( cls , data : typing . Any ) -> typing . Optional [ \"ValueType\" ]: import pyarrow as pa if isinstance ( data , pa . Table ): return TableType () return None","title":"check_data()"},{"location":"api_reference/kiara_modules.core.yaml/","text":"kiara_modules.core.yaml \u00b6 ToYamlModuleOld \u00b6 Convert arbitrary types into YAML format. Early days for this module, it doesn't support a whole lot of types yet.","title":"\u279c\u2007yaml"},{"location":"api_reference/kiara_modules.core.yaml/#kiara_modulescoreyaml","text":"","title":"kiara_modules.core.yaml"},{"location":"api_reference/kiara_modules.core.yaml/#kiara_modules.core.yaml.ToYamlModuleOld","text":"Convert arbitrary types into YAML format. Early days for this module, it doesn't support a whole lot of types yet.","title":"ToYamlModuleOld"}]}